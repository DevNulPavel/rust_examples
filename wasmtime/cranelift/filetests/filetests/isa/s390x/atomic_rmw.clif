test compile
target s390x

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ATOMIC_RMW (XCHG)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %atomic_rmw_xchg_i64(i64, i64, i64) -> i64 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = atomic_rmw.i64 xchg v1, v2
  return v3
}

; check:  lg %r0, 0(%r3)
; nextln: 0: csg %r0, %r4, 0(%r3) ; jglh 0b ; 1:
; nextln: lgr %r2, %r0
; nextln: br %r14

function %atomic_rmw_xchg_i32(i64, i64, i32) -> i32 {
block0(v0: i64, v1: i64, v2: i32):
  v3 = atomic_rmw.i32 xchg v1, v2
  return v3
}

; check:  l %r0, 0(%r3)
; nextln: 0: cs %r0, %r4, 0(%r3) ; jglh 0b ; 1:
; nextln: lr %r2, %r0
; nextln: br %r14

function %atomic_rmw_xchg_i16(i64, i64, i16) -> i16 {
block0(v0: i64, v1: i64, v2: i16):
  v3 = atomic_rmw.i16 xchg v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; risbgn %r1, %r4, 32, 48, 16 ; rll %r1, %r1, 0(%r2) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 16(%r2)
; nextln: br %r14

function %atomic_rmw_xchg_i8(i64, i64, i8) -> i8 {
block0(v0: i64, v1: i64, v2: i8):
  v3 = atomic_rmw.i8 xchg v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: lcr %r5, %r2
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; risbgn %r1, %r4, 32, 40, 24 ; rll %r1, %r1, 0(%r5) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 8(%r2)
; nextln: br %r14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ATOMIC_RMW (ADD)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %atomic_rmw_add_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = atomic_rmw.i64 add v0, v1
  return v2
}

; check:  laag %r2, %r3, 0(%r2)
; nextln: br %r14

function %atomic_rmw_add_i32(i64, i32) -> i32 {
block0(v0: i64, v1: i32):
  v2 = atomic_rmw.i32 add v0, v1
  return v2
}

; check:  laa %r2, %r3, 0(%r2)
; nextln: br %r14

function %atomic_rmw_add_i16(i64, i64, i16) -> i16 {
block0(v0: i64, v1: i64, v2: i16):
  v3 = atomic_rmw.i16 add v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: sllk %r4, %r4, 16
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; ar %r1, %r4 ; rll %r1, %r1, 0(%r2) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 16(%r2)
; nextln: br %r14

function %atomic_rmw_add_i8(i64, i64, i8) -> i8 {
block0(v0: i64, v1: i64, v2: i8):
  v3 = atomic_rmw.i8 add v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: sllk %r4, %r4, 24
; nextln: lcr %r5, %r2
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; ar %r1, %r4 ; rll %r1, %r1, 0(%r5) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 8(%r2)
; nextln: br %r14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ATOMIC_RMW (SUB)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %atomic_rmw_sub_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = atomic_rmw.i64 sub v0, v1
  return v2
}

; check:  lcgr %r3, %r3
; nextln: laag %r2, %r3, 0(%r2)
; nextln: br %r14

function %atomic_rmw_sub_i32(i64, i32) -> i32 {
block0(v0: i64, v1: i32):
  v2 = atomic_rmw.i32 sub v0, v1
  return v2
}

; check:  lcr %r3, %r3
; nextln: laa %r2, %r3, 0(%r2)
; nextln: br %r14

function %atomic_rmw_sub_i16(i64, i64, i16) -> i16 {
block0(v0: i64, v1: i64, v2: i16):
  v3 = atomic_rmw.i16 sub v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: sllk %r4, %r4, 16
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; sr %r1, %r4 ; rll %r1, %r1, 0(%r2) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 16(%r2)
; nextln: br %r14

function %atomic_rmw_sub_i8(i64, i64, i8) -> i8 {
block0(v0: i64, v1: i64, v2: i8):
  v3 = atomic_rmw.i8 sub v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: sllk %r4, %r4, 24
; nextln: lcr %r5, %r2
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; sr %r1, %r4 ; rll %r1, %r1, 0(%r5) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 8(%r2)
; nextln: br %r14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ATOMIC_RMW (AND)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %atomic_rmw_and_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = atomic_rmw.i64 and v0, v1
  return v2
}

; check:  lang %r2, %r3, 0(%r2)
; nextln: br %r14

function %atomic_rmw_and_i32(i64, i32) -> i32 {
block0(v0: i64, v1: i32):
  v2 = atomic_rmw.i32 and v0, v1
  return v2
}

; check:  lan %r2, %r3, 0(%r2)
; nextln: br %r14

function %atomic_rmw_and_i16(i64, i64, i16) -> i16 {
block0(v0: i64, v1: i64, v2: i16):
  v3 = atomic_rmw.i16 and v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; rnsbg %r1, %r4, 32, 48, 16 ; rll %r1, %r1, 0(%r2) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 16(%r2)
; nextln: br %r14

function %atomic_rmw_and_i8(i64, i64, i8) -> i8 {
block0(v0: i64, v1: i64, v2: i8):
  v3 = atomic_rmw.i8 and v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: lcr %r5, %r2
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; rnsbg %r1, %r4, 32, 40, 24 ; rll %r1, %r1, 0(%r5) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 8(%r2)
; nextln: br %r14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ATOMIC_RMW (OR)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %atomic_rmw_or_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = atomic_rmw.i64 or v0, v1
  return v2
}

; check:  laog %r2, %r3, 0(%r2)
; nextln: br %r14

function %atomic_rmw_or_i32(i64, i32) -> i32 {
block0(v0: i64, v1: i32):
  v2 = atomic_rmw.i32 or v0, v1
  return v2
}

; check:  lao %r2, %r3, 0(%r2)
; nextln: br %r14

function %atomic_rmw_or_i16(i64, i64, i16) -> i16 {
block0(v0: i64, v1: i64, v2: i16):
  v3 = atomic_rmw.i16 or v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; rosbg %r1, %r4, 32, 48, 16 ; rll %r1, %r1, 0(%r2) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 16(%r2)
; nextln: br %r14

function %atomic_rmw_or_i8(i64, i64, i8) -> i8 {
block0(v0: i64, v1: i64, v2: i8):
  v3 = atomic_rmw.i8 or v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: lcr %r5, %r2
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; rosbg %r1, %r4, 32, 40, 24 ; rll %r1, %r1, 0(%r5) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 8(%r2)
; nextln: br %r14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ATOMIC_RMW (XOR)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %atomic_rmw_xor_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = atomic_rmw.i64 xor v0, v1
  return v2
}

; check:  laxg %r2, %r3, 0(%r2)
; nextln: br %r14

function %atomic_rmw_xor_i32(i64, i32) -> i32 {
block0(v0: i64, v1: i32):
  v2 = atomic_rmw.i32 xor v0, v1
  return v2
}

; check:  lax %r2, %r3, 0(%r2)
; nextln: br %r14

function %atomic_rmw_xor_i16(i64, i64, i16) -> i16 {
block0(v0: i64, v1: i64, v2: i16):
  v3 = atomic_rmw.i16 xor v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; rxsbg %r1, %r4, 32, 48, 16 ; rll %r1, %r1, 0(%r2) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 16(%r2)
; nextln: br %r14

function %atomic_rmw_xor_i8(i64, i64, i8) -> i8 {
block0(v0: i64, v1: i64, v2: i8):
  v3 = atomic_rmw.i8 xor v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: lcr %r5, %r2
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; rxsbg %r1, %r4, 32, 40, 24 ; rll %r1, %r1, 0(%r5) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 8(%r2)
; nextln: br %r14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ATOMIC_RMW (NAND)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %atomic_rmw_nand_i64(i64, i64, i64) -> i64 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = atomic_rmw.i64 nand v1, v2
  return v3
}

; check:  lg %r0, 0(%r3)
; nextln: 0: ngrk %r1, %r0, %r4 ; xilf %r1, 4294967295 ; xihf %r1, 4294967295 ; csg %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: lgr %r2, %r0
; nextln: br %r14

function %atomic_rmw_nand_i32(i64, i64, i32) -> i32 {
block0(v0: i64, v1: i64, v2: i32):
  v3 = atomic_rmw.i32 nand v1, v2
  return v3
}

; check:  l %r0, 0(%r3)
; nextln: 0: nrk %r1, %r0, %r4 ; xilf %r1, 4294967295 ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: lr %r2, %r0
; nextln: br %r14

function %atomic_rmw_nand_i16(i64, i64, i16) -> i16 {
block0(v0: i64, v1: i64, v2: i16):
  v3 = atomic_rmw.i16 nand v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; rnsbg %r1, %r4, 32, 48, 16 ; xilf %r1, 4294901760 ; rll %r1, %r1, 0(%r2) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 16(%r2)
; nextln: br %r14

function %atomic_rmw_nand_i8(i64, i64, i8) -> i8 {
block0(v0: i64, v1: i64, v2: i8):
  v3 = atomic_rmw.i8 nand v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: lcr %r5, %r2
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; rnsbg %r1, %r4, 32, 40, 24 ; xilf %r1, 4278190080 ; rll %r1, %r1, 0(%r5) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 8(%r2)
; nextln: br %r14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ATOMIC_RMW (SMIN)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %atomic_rmw_smin_i64(i64, i64, i64) -> i64 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = atomic_rmw.i64 smin v1, v2
  return v3
}

; check:  lg %r0, 0(%r3)
; nextln: 0: cgr %r4, %r0 ; jgnl 1f ; csg %r0, %r4, 0(%r3) ; jglh 0b ; 1:
; nextln: lgr %r2, %r0
; nextln: br %r14

function %atomic_rmw_smin_i32(i64, i64, i32) -> i32 {
block0(v0: i64, v1: i64, v2: i32):
  v3 = atomic_rmw.i32 smin v1, v2
  return v3
}

; check:  l %r0, 0(%r3)
; nextln: 0: cr %r4, %r0 ; jgnl 1f ; cs %r0, %r4, 0(%r3) ; jglh 0b ; 1:
; nextln: lr %r2, %r0
; nextln: br %r14

function %atomic_rmw_smin_i16(i64, i64, i16) -> i16 {
block0(v0: i64, v1: i64, v2: i16):
  v3 = atomic_rmw.i16 smin v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: sllk %r4, %r4, 16
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; cr %r4, %r1 ; jgnl 1f ; risbgn %r1, %r4, 32, 48, 0 ; rll %r1, %r1, 0(%r2) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 16(%r2)
; nextln: br %r14

function %atomic_rmw_smin_i8(i64, i64, i8) -> i8 {
block0(v0: i64, v1: i64, v2: i8):
  v3 = atomic_rmw.i8 smin v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: sllk %r4, %r4, 24
; nextln: lcr %r5, %r2
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; cr %r4, %r1 ; jgnl 1f ; risbgn %r1, %r4, 32, 40, 0 ; rll %r1, %r1, 0(%r5) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 8(%r2)
; nextln: br %r14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ATOMIC_RMW (SMAX)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %atomic_rmw_smax_i64(i64, i64, i64) -> i64 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = atomic_rmw.i64 smax v1, v2
  return v3
}

; check:  lg %r0, 0(%r3)
; nextln: 0: cgr %r4, %r0 ; jgnh 1f ; csg %r0, %r4, 0(%r3) ; jglh 0b ; 1:
; nextln: lgr %r2, %r0
; nextln: br %r14

function %atomic_rmw_smax_i32(i64, i64, i32) -> i32 {
block0(v0: i64, v1: i64, v2: i32):
  v3 = atomic_rmw.i32 smax v1, v2
  return v3
}

; check:  l %r0, 0(%r3)
; nextln: 0: cr %r4, %r0 ; jgnh 1f ; cs %r0, %r4, 0(%r3) ; jglh 0b ; 1:
; nextln: lr %r2, %r0
; nextln: br %r14

function %atomic_rmw_smax_i16(i64, i64, i16) -> i16 {
block0(v0: i64, v1: i64, v2: i16):
  v3 = atomic_rmw.i16 smax v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: sllk %r4, %r4, 16
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; cr %r4, %r1 ; jgnh 1f ; risbgn %r1, %r4, 32, 48, 0 ; rll %r1, %r1, 0(%r2) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 16(%r2)
; nextln: br %r14

function %atomic_rmw_smax_i8(i64, i64, i8) -> i8 {
block0(v0: i64, v1: i64, v2: i8):
  v3 = atomic_rmw.i8 smax v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: sllk %r4, %r4, 24
; nextln: lcr %r5, %r2
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; cr %r4, %r1 ; jgnh 1f ; risbgn %r1, %r4, 32, 40, 0 ; rll %r1, %r1, 0(%r5) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 8(%r2)
; nextln: br %r14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ATOMIC_RMW (UMIN)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %atomic_rmw_umin_i64(i64, i64, i64) -> i64 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = atomic_rmw.i64 umin v1, v2
  return v3
}

; check:  lg %r0, 0(%r3)
; nextln: 0: clgr %r4, %r0 ; jgnl 1f ; csg %r0, %r4, 0(%r3) ; jglh 0b ; 1:
; nextln: lgr %r2, %r0
; nextln: br %r14

function %atomic_rmw_umin_i32(i64, i64, i32) -> i32 {
block0(v0: i64, v1: i64, v2: i32):
  v3 = atomic_rmw.i32 umin v1, v2
  return v3
}

; check:  l %r0, 0(%r3)
; nextln: 0: clr %r4, %r0 ; jgnl 1f ; cs %r0, %r4, 0(%r3) ; jglh 0b ; 1:
; nextln: lr %r2, %r0
; nextln: br %r14

function %atomic_rmw_umin_i16(i64, i64, i16) -> i16 {
block0(v0: i64, v1: i64, v2: i16):
  v3 = atomic_rmw.i16 umin v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: sllk %r4, %r4, 16
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; clr %r4, %r1 ; jgnl 1f ; risbgn %r1, %r4, 32, 48, 0 ; rll %r1, %r1, 0(%r2) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 16(%r2)
; nextln: br %r14

function %atomic_rmw_umin_i8(i64, i64, i8) -> i8 {
block0(v0: i64, v1: i64, v2: i8):
  v3 = atomic_rmw.i8 umin v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: sllk %r4, %r4, 24
; nextln: lcr %r5, %r2
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; clr %r4, %r1 ; jgnl 1f ; risbgn %r1, %r4, 32, 40, 0 ; rll %r1, %r1, 0(%r5) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 8(%r2)
; nextln: br %r14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ATOMIC_RMW (UMAX)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %atomic_rmw_umax_i64(i64, i64, i64) -> i64 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = atomic_rmw.i64 umax v1, v2
  return v3
}

; check:  lg %r0, 0(%r3)
; nextln: 0: clgr %r4, %r0 ; jgnh 1f ; csg %r0, %r4, 0(%r3) ; jglh 0b ; 1:
; nextln: lgr %r2, %r0
; nextln: br %r14

function %atomic_rmw_umax_i32(i64, i64, i32) -> i32 {
block0(v0: i64, v1: i64, v2: i32):
  v3 = atomic_rmw.i32 umax v1, v2
  return v3
}

; check:  l %r0, 0(%r3)
; nextln: 0: clr %r4, %r0 ; jgnh 1f ; cs %r0, %r4, 0(%r3) ; jglh 0b ; 1:
; nextln: lr %r2, %r0
; nextln: br %r14

function %atomic_rmw_umax_i16(i64, i64, i16) -> i16 {
block0(v0: i64, v1: i64, v2: i16):
  v3 = atomic_rmw.i16 umax v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: sllk %r4, %r4, 16
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; clr %r4, %r1 ; jgnh 1f ; risbgn %r1, %r4, 32, 48, 0 ; rll %r1, %r1, 0(%r2) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 16(%r2)
; nextln: br %r14

function %atomic_rmw_umax_i8(i64, i64, i8) -> i8 {
block0(v0: i64, v1: i64, v2: i8):
  v3 = atomic_rmw.i8 umax v1, v2
  return v3
}

; check:  sllk %r2, %r3, 3
; nextln: nill %r3, 65532
; nextln: sllk %r4, %r4, 24
; nextln: lcr %r5, %r2
; nextln: l %r0, 0(%r3)
; nextln: 0: rll %r1, %r0, 0(%r2) ; clr %r4, %r1 ; jgnh 1f ; risbgn %r1, %r4, 32, 40, 0 ; rll %r1, %r1, 0(%r5) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
; nextln: rll %r2, %r0, 8(%r2)
; nextln: br %r14

