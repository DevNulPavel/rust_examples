test compile
target s390x

function %foo() {
block0:
    return
}

function %stack_limit_leaf_zero(i64 stack_limit) {
block0(v0: i64):
    return
}

; check:  br %r14

function %stack_limit_gv_leaf_zero(i64 vmctx) {
    gv0 = vmctx
    gv1 = load.i64 notrap aligned gv0
    gv2 = load.i64 notrap aligned gv1+4
    stack_limit = gv2
block0(v0: i64):
    return
}

; check:  br %r14


function %stack_limit_call_zero(i64 stack_limit) {
    fn0 = %foo()
block0(v0: i64):
    call fn0()
    return
}

; check:  clgrtle %r15, %r2
; nextln: stmg %r14, %r15, 112(%r15)
; nextln: aghi %r15, -160
; nextln: virtual_sp_offset_adjust 160
; nextln: bras %r1, 12 ; data %foo + 0 ; lg %r2, 0(%r1)
; nextln: basr %r14, %r2
; nextln: lmg %r14, %r15, 272(%r15)
; nextln: br %r14

function %stack_limit_gv_call_zero(i64 vmctx) {
    gv0 = vmctx
    gv1 = load.i64 notrap aligned gv0
    gv2 = load.i64 notrap aligned gv1+4
    stack_limit = gv2
    fn0 = %foo()
block0(v0: i64):
    call fn0()
    return
}

; check:  lg %r1, 0(%r2)
; nextln: lg %r1, 4(%r1)
; nextln: clgrtle %r15, %r1
; nextln: stmg %r14, %r15, 112(%r15)
; nextln: aghi %r15, -160
; nextln: virtual_sp_offset_adjust 160
; nextln: bras %r1, 12 ; data %foo + 0 ; lg %r2, 0(%r1)
; nextln: basr %r14, %r2
; nextln: lmg %r14, %r15, 272(%r15)
; nextln: br %r14

function %stack_limit(i64 stack_limit) {
    ss0 = explicit_slot 168
block0(v0: i64):
    return
}

; check: la %r1, 168(%r2)
; nextln: clgrtle %r15, %r1
; nextln: aghi %r15, -168
; nextln: aghi %r15, 168
; nextln: br %r14

function %large_stack_limit(i64 stack_limit) {
    ss0 = explicit_slot 400000
block0(v0: i64):
    return
}

; check:  clgrtle %r15, %r2
; nextln: lay %r1, 400000(%r2)
; nextln: clgrtle %r15, %r1
; nextln: agfi %r15, -400000
; nextln: agfi %r15, 400000
; nextln: br %r14

function %huge_stack_limit(i64 stack_limit) {
    ss0 = explicit_slot 4000000
block0(v0: i64):
    return
}

; check:  clgrtle %r15, %r2
; nextln: lgr %r1, %r2
; nextln: algfi %r1, 4000000
; nextln: clgrtle %r15, %r1
; nextln: agfi %r15, -4000000
; nextln: agfi %r15, 4000000
; nextln: br %r14

function %limit_preamble(i64 vmctx) {
    gv0 = vmctx
    gv1 = load.i64 notrap aligned gv0
    gv2 = load.i64 notrap aligned gv1+4
    stack_limit = gv2
    ss0 = explicit_slot 20
block0(v0: i64):
    return
}

; check:  lg %r1, 0(%r2)
; nextln: lg %r1, 4(%r1)
; nextln: la %r1, 24(%r1)
; nextln: clgrtle %r15, %r1
; nextln: aghi %r15, -24
; nextln: aghi %r15, 24
; nextln: br %r14

function %limit_preamble_large(i64 vmctx) {
    gv0 = vmctx
    gv1 = load.i64 notrap aligned gv0
    gv2 = load.i64 notrap aligned gv1+4
    stack_limit = gv2
    ss0 = explicit_slot 400000
block0(v0: i64):
    return
}

; check:  lg %r1, 0(%r2)
; nextln: lg %r1, 4(%r1)
; nextln: clgrtle %r15, %r1
; nextln: lay %r1, 400000(%r1)
; nextln: clgrtle %r15, %r1
; nextln: agfi %r15, -400000
; nextln: agfi %r15, 400000
; nextln: br %r14

function %limit_preamble_huge(i64 vmctx) {
    gv0 = vmctx
    gv1 = load.i64 notrap aligned gv0
    gv2 = load.i64 notrap aligned gv1+4
    stack_limit = gv2
    ss0 = explicit_slot 4000000
block0(v0: i64):
    return
}

; check:  lg %r1, 0(%r2)
; nextln: lg %r1, 4(%r1)
; nextln: clgrtle %r15, %r1
; nextln: algfi %r1, 4000000
; nextln: clgrtle %r15, %r1
; nextln: agfi %r15, -4000000
; nextln: agfi %r15, 4000000
; nextln: br %r14

function %limit_preamble_huge_offset(i64 vmctx) {
    gv0 = vmctx
    gv1 = load.i64 notrap aligned gv0+1000000
    stack_limit = gv1
    ss0 = explicit_slot 20
block0(v0: i64):
    return
}

; check:  lgfi %r1, 1000000 ; lg %r1, 0(%r1,%r2)
; nextln: la %r1, 24(%r1)
; nextln: clgrtle %r15, %r1
; nextln: aghi %r15, -24
; nextln: aghi %r15, 24
; nextln: br %r14
