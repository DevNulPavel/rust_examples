test compile precise-output
set enable_llvm_abi_extensions=true
target x86_64

function %f0(i32, i128, i128) -> i128 {
block0(v0: i32, v1: i128, v2: i128):
    v3 = iconst.i32 42
    v4 = icmp.i32 eq v0, v3
    v5 = select.i128 v4, v1, v2
    return v5
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 11)
;   Inst 0:   pushq   %rbp
;   Inst 1:   movq    %rsp, %rbp
;   Inst 2:   movl    $42, %eax
;   Inst 3:   cmpl    %eax, %edi
;   Inst 4:   cmovzq  %rsi, %rcx
;   Inst 5:   cmovzq  %rdx, %r8
;   Inst 6:   movq    %rcx, %rax
;   Inst 7:   movq    %r8, %rdx
;   Inst 8:   movq    %rbp, %rsp
;   Inst 9:   popq    %rbp
;   Inst 10:   ret
; }}

;; Test for issue: https://github.com/bytecodealliance/wasmtime/issues/3963.
function %f1(f32, i128, i128) -> i128 {
block0(v0: f32, v1: i128, v2: i128):
    v3 = fcmp.f32 eq v0, v0
    v4 = select.i128 v3, v1, v2
    return v4
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 12)
;   Inst 0:   pushq   %rbp
;   Inst 1:   movq    %rsp, %rbp
;   Inst 2:   ucomiss %xmm0, %xmm0
;   Inst 3:   cmovnzq %rdx, %rdi
;   Inst 4:   cmovpq  %rdx, %rdi
;   Inst 5:   cmovnzq %rcx, %rsi
;   Inst 6:   cmovpq  %rcx, %rsi
;   Inst 7:   movq    %rdi, %rax
;   Inst 8:   movq    %rsi, %rdx
;   Inst 9:   movq    %rbp, %rsp
;   Inst 10:   popq    %rbp
;   Inst 11:   ret
; }}

