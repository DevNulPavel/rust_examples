test compile precise-output
target x86_64

function %f(i32, i64 vmctx) -> i64 {
    gv0 = vmctx
    gv1 = load.i64 notrap aligned gv0+0
    gv2 = load.i64 notrap aligned gv0+8
    heap0 = dynamic gv1, bound gv2, offset_guard 0x1000, index_type i32

block0(v0: i32, v1: i64):

    v2 = heap_addr.i64 heap0, v0, 0x8000
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 1)
;   (successor: Block 2)
;   (instruction range: 0 .. 9)
;   Inst 0:   pushq   %rbp
;   Inst 1:   movq    %rsp, %rbp
;   Inst 2:   movl    %edi, %ecx
;   Inst 3:   movq    8(%rsi), %rdi
;   Inst 4:   movq    %rcx, %rax
;   Inst 5:   addq    $32768, %rax
;   Inst 6:   jnb ; ud2 heap_oob ;
;   Inst 7:   cmpq    %rdi, %rax
;   Inst 8:   jbe     label1; j label2
; Block 1:
;   (original IR block: block2)
;   (instruction range: 9 .. 17)
;   Inst 9:   addq    0(%rsi), %rcx
;   Inst 10:   xorq    %rsi, %rsi
;   Inst 11:   cmpq    %rdi, %rax
;   Inst 12:   cmovnbeq %rsi, %rcx
;   Inst 13:   movq    %rcx, %rax
;   Inst 14:   movq    %rbp, %rsp
;   Inst 15:   popq    %rbp
;   Inst 16:   ret
; Block 2:
;   (original IR block: block1)
;   (instruction range: 17 .. 18)
;   Inst 17:   ud2 heap_oob
; }}

