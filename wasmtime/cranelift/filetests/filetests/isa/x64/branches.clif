test compile precise-output
target x86_64

function %f0(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = icmp eq v0, v1
  brnz v2, block1
  jump block2

block1:
  v3 = iconst.i32 1
  return v3

block2:
  v4 = iconst.i32 2
  return v4
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 1)
;   (successor: Block 2)
;   (instruction range: 0 .. 4)
;   Inst 0:   pushq   %rbp
;   Inst 1:   movq    %rsp, %rbp
;   Inst 2:   cmpl    %esi, %edi
;   Inst 3:   jz      label1; j label2
; Block 1:
;   (original IR block: block1)
;   (instruction range: 4 .. 8)
;   Inst 4:   movl    $1, %eax
;   Inst 5:   movq    %rbp, %rsp
;   Inst 6:   popq    %rbp
;   Inst 7:   ret
; Block 2:
;   (original IR block: block2)
;   (instruction range: 8 .. 12)
;   Inst 8:   movl    $2, %eax
;   Inst 9:   movq    %rbp, %rsp
;   Inst 10:   popq    %rbp
;   Inst 11:   ret
; }}

function %f1(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = icmp eq v0, v1
  brz v2, block1
  jump block2

block1:
  v3 = iconst.i32 1
  return v3

block2:
  v4 = iconst.i32 2
  return v4
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 1)
;   (successor: Block 2)
;   (instruction range: 0 .. 4)
;   Inst 0:   pushq   %rbp
;   Inst 1:   movq    %rsp, %rbp
;   Inst 2:   cmpl    %esi, %edi
;   Inst 3:   jnz     label1; j label2
; Block 1:
;   (original IR block: block1)
;   (instruction range: 4 .. 8)
;   Inst 4:   movl    $1, %eax
;   Inst 5:   movq    %rbp, %rsp
;   Inst 6:   popq    %rbp
;   Inst 7:   ret
; Block 2:
;   (original IR block: block2)
;   (instruction range: 8 .. 12)
;   Inst 8:   movl    $2, %eax
;   Inst 9:   movq    %rbp, %rsp
;   Inst 10:   popq    %rbp
;   Inst 11:   ret
; }}

function %f2(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = ifcmp v0, v1
  brif eq v2, block1
  jump block2

block1:
  v3 = iconst.i32 1
  return v3

block2:
  v4 = iconst.i32 2
  return v4
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 1)
;   (successor: Block 2)
;   (instruction range: 0 .. 4)
;   Inst 0:   pushq   %rbp
;   Inst 1:   movq    %rsp, %rbp
;   Inst 2:   cmpl    %esi, %edi
;   Inst 3:   jz      label1; j label2
; Block 1:
;   (original IR block: block1)
;   (instruction range: 4 .. 8)
;   Inst 4:   movl    $1, %eax
;   Inst 5:   movq    %rbp, %rsp
;   Inst 6:   popq    %rbp
;   Inst 7:   ret
; Block 2:
;   (original IR block: block2)
;   (instruction range: 8 .. 12)
;   Inst 8:   movl    $2, %eax
;   Inst 9:   movq    %rbp, %rsp
;   Inst 10:   popq    %rbp
;   Inst 11:   ret
; }}

function %f3(f32, f32) -> i32 {
block0(v0: f32, v1: f32):
  v2 = ffcmp v0, v1
  brff eq v2, block1
  jump block2

block1:
  v3 = iconst.i32 1
  return v3

block2:
  v4 = iconst.i32 2
  return v4
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 2)
;   (successor: Block 1)
;   (instruction range: 0 .. 5)
;   Inst 0:   pushq   %rbp
;   Inst 1:   movq    %rsp, %rbp
;   Inst 2:   ucomiss %xmm1, %xmm0
;   Inst 3:   jp      label2
;   Inst 4:   jnz     label2; j label1
; Block 1:
;   (original IR block: block1)
;   (instruction range: 5 .. 9)
;   Inst 5:   movl    $1, %eax
;   Inst 6:   movq    %rbp, %rsp
;   Inst 7:   popq    %rbp
;   Inst 8:   ret
; Block 2:
;   (original IR block: block2)
;   (instruction range: 9 .. 13)
;   Inst 9:   movl    $2, %eax
;   Inst 10:   movq    %rbp, %rsp
;   Inst 11:   popq    %rbp
;   Inst 12:   ret
; }}

