test compile precise-output
set unwind_info=false
target aarch64


function %fn1(i8x16) -> i16x8 {
block0(v0: i8x16):
  v1 = swiden_low v0
  v2 = swiden_high v0
  v3 = iadd_pairwise v1, v2
  return v3
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   saddlp v0.8h, v0.16b
;   Inst 1:   ret
; }}

function %fn2(i8x16) -> i16x8 {
block0(v0: i8x16):
  v1 = uwiden_low v0
  v2 = uwiden_high v0
  v3 = iadd_pairwise v1, v2
  return v3
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   uaddlp v0.8h, v0.16b
;   Inst 1:   ret
; }}

function %fn3(i16x8) -> i32x4 {
block0(v0: i16x8):
  v1 = swiden_low v0
  v2 = swiden_high v0
  v3 = iadd_pairwise v1, v2
  return v3
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   saddlp v0.4s, v0.8h
;   Inst 1:   ret
; }}

function %fn4(i16x8) -> i32x4 {
block0(v0: i16x8):
  v1 = uwiden_low v0
  v2 = uwiden_high v0
  v3 = iadd_pairwise v1, v2
  return v3
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   uaddlp v0.4s, v0.8h
;   Inst 1:   ret
; }}

function %fn5(i8x16, i8x16) -> i16x8 {
block0(v0: i8x16, v1: i8x16):
  v2 = swiden_low v0
  v3 = swiden_high v1
  v4 = iadd_pairwise v2, v3
  return v4
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 4)
;   Inst 0:   sxtl v0.8h, v0.8b
;   Inst 1:   sxtl2 v1.8h, v1.16b
;   Inst 2:   addp v0.8h, v0.8h, v1.8h
;   Inst 3:   ret
; }}

function %fn6(i8x16, i8x16) -> i16x8 {
block0(v0: i8x16, v1: i8x16):
  v2 = uwiden_low v0
  v3 = uwiden_high v1
  v4 = iadd_pairwise v2, v3
  return v4
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 4)
;   Inst 0:   uxtl v0.8h, v0.8b
;   Inst 1:   uxtl2 v1.8h, v1.16b
;   Inst 2:   addp v0.8h, v0.8h, v1.8h
;   Inst 3:   ret
; }}

function %fn7(i8x16) -> i16x8 {
block0(v0: i8x16):
  v1 = uwiden_low v0
  v2 = swiden_high v0
  v3 = iadd_pairwise v1, v2
  return v3
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 4)
;   Inst 0:   uxtl v1.8h, v0.8b
;   Inst 1:   sxtl2 v0.8h, v0.16b
;   Inst 2:   addp v0.8h, v1.8h, v0.8h
;   Inst 3:   ret
; }}

function %fn8(i8x16) -> i16x8 {
block0(v0: i8x16):
  v1 = swiden_low v0
  v2 = uwiden_high v0
  v3 = iadd_pairwise v1, v2
  return v3
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 4)
;   Inst 0:   sxtl v1.8h, v0.8b
;   Inst 1:   uxtl2 v0.8h, v0.16b
;   Inst 2:   addp v0.8h, v1.8h, v0.8h
;   Inst 3:   ret
; }}

