test compile precise-output
set unwind_info=false
target aarch64

function %f1(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fadd v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fadd s0, s0, s1
;   Inst 1:   ret
; }}

function %f2(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fadd v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fadd d0, d0, d1
;   Inst 1:   ret
; }}

function %f3(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fsub v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fsub s0, s0, s1
;   Inst 1:   ret
; }}

function %f4(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fsub v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fsub d0, d0, d1
;   Inst 1:   ret
; }}

function %f5(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fmul v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fmul s0, s0, s1
;   Inst 1:   ret
; }}

function %f6(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fmul v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fmul d0, d0, d1
;   Inst 1:   ret
; }}

function %f7(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fdiv v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fdiv s0, s0, s1
;   Inst 1:   ret
; }}

function %f8(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fdiv v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fdiv d0, d0, d1
;   Inst 1:   ret
; }}

function %f9(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fmin v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fmin s0, s0, s1
;   Inst 1:   ret
; }}

function %f10(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fmin v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fmin d0, d0, d1
;   Inst 1:   ret
; }}

function %f11(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fmax v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fmax s0, s0, s1
;   Inst 1:   ret
; }}

function %f12(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fmax v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fmax d0, d0, d1
;   Inst 1:   ret
; }}

function %f13(f32) -> f32 {
block0(v0: f32):
  v1 = sqrt v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fsqrt s0, s0
;   Inst 1:   ret
; }}

function %f15(f64) -> f64 {
block0(v0: f64):
  v1 = sqrt v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fsqrt d0, d0
;   Inst 1:   ret
; }}

function %f16(f32) -> f32 {
block0(v0: f32):
  v1 = fabs v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fabs s0, s0
;   Inst 1:   ret
; }}

function %f17(f64) -> f64 {
block0(v0: f64):
  v1 = fabs v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fabs d0, d0
;   Inst 1:   ret
; }}

function %f18(f32) -> f32 {
block0(v0: f32):
  v1 = fneg v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fneg s0, s0
;   Inst 1:   ret
; }}

function %f19(f64) -> f64 {
block0(v0: f64):
  v1 = fneg v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fneg d0, d0
;   Inst 1:   ret
; }}

function %f20(f32) -> f64 {
block0(v0: f32):
  v1 = fpromote.f64 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fcvt d0, s0
;   Inst 1:   ret
; }}

function %f21(f64) -> f32 {
block0(v0: f64):
  v1 = fdemote.f32 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fcvt s0, d0
;   Inst 1:   ret
; }}

function %f22(f32) -> f32 {
block0(v0: f32):
  v1 = ceil v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   frintp s0, s0
;   Inst 1:   ret
; }}

function %f22(f64) -> f64 {
block0(v0: f64):
  v1 = ceil v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   frintp d0, d0
;   Inst 1:   ret
; }}

function %f23(f32) -> f32 {
block0(v0: f32):
  v1 = floor v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   frintm s0, s0
;   Inst 1:   ret
; }}

function %f24(f64) -> f64 {
block0(v0: f64):
  v1 = floor v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   frintm d0, d0
;   Inst 1:   ret
; }}

function %f25(f32) -> f32 {
block0(v0: f32):
  v1 = trunc v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   frintz s0, s0
;   Inst 1:   ret
; }}

function %f26(f64) -> f64 {
block0(v0: f64):
  v1 = trunc v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   frintz d0, d0
;   Inst 1:   ret
; }}

function %f27(f32) -> f32 {
block0(v0: f32):
  v1 = nearest v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   frintn s0, s0
;   Inst 1:   ret
; }}

function %f28(f64) -> f64 {
block0(v0: f64):
  v1 = nearest v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   frintn d0, d0
;   Inst 1:   ret
; }}

function %f29(f32, f32, f32) -> f32 {
block0(v0: f32, v1: f32, v2: f32):
  v3 = fma v0, v1, v2
  return v3
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fmadd s0, s0, s1, s2
;   Inst 1:   ret
; }}

function %f30(f64, f64, f64) -> f64 {
block0(v0: f64, v1: f64, v2: f64):
  v3 = fma v0, v1, v2
  return v3
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   fmadd d0, d0, d1, d2
;   Inst 1:   ret
; }}

function %f31(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fcopysign v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 3)
;   Inst 0:   ushr v1.2s, v1.2s, #31
;   Inst 1:   sli v0.2s, v1.2s, #31
;   Inst 2:   ret
; }}

function %f32(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fcopysign v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 3)
;   Inst 0:   ushr d1, d1, #63
;   Inst 1:   sli d0, d1, #63
;   Inst 2:   ret
; }}

function %f33(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_uint.i32 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 11)
;   Inst 0:   fcmp s0, s0
;   Inst 1:   b.vc 8 ; udf
;   Inst 2:   fmov s1, #-1
;   Inst 3:   fcmp s0, s1
;   Inst 4:   b.gt 8 ; udf
;   Inst 5:   movz x0, #20352, LSL #16
;   Inst 6:   fmov s1, w0
;   Inst 7:   fcmp s0, s1
;   Inst 8:   b.mi 8 ; udf
;   Inst 9:   fcvtzu w0, s0
;   Inst 10:   ret
; }}

function %f34(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_sint.i32 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 12)
;   Inst 0:   fcmp s0, s0
;   Inst 1:   b.vc 8 ; udf
;   Inst 2:   movz x0, #52992, LSL #16
;   Inst 3:   fmov s1, w0
;   Inst 4:   fcmp s0, s1
;   Inst 5:   b.ge 8 ; udf
;   Inst 6:   movz x0, #20224, LSL #16
;   Inst 7:   fmov s1, w0
;   Inst 8:   fcmp s0, s1
;   Inst 9:   b.mi 8 ; udf
;   Inst 10:   fcvtzs w0, s0
;   Inst 11:   ret
; }}

function %f35(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_uint.i64 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 11)
;   Inst 0:   fcmp s0, s0
;   Inst 1:   b.vc 8 ; udf
;   Inst 2:   fmov s1, #-1
;   Inst 3:   fcmp s0, s1
;   Inst 4:   b.gt 8 ; udf
;   Inst 5:   movz x0, #24448, LSL #16
;   Inst 6:   fmov s1, w0
;   Inst 7:   fcmp s0, s1
;   Inst 8:   b.mi 8 ; udf
;   Inst 9:   fcvtzu x0, s0
;   Inst 10:   ret
; }}

function %f36(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_sint.i64 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 12)
;   Inst 0:   fcmp s0, s0
;   Inst 1:   b.vc 8 ; udf
;   Inst 2:   movz x0, #57088, LSL #16
;   Inst 3:   fmov s1, w0
;   Inst 4:   fcmp s0, s1
;   Inst 5:   b.ge 8 ; udf
;   Inst 6:   movz x0, #24320, LSL #16
;   Inst 7:   fmov s1, w0
;   Inst 8:   fcmp s0, s1
;   Inst 9:   b.mi 8 ; udf
;   Inst 10:   fcvtzs x0, s0
;   Inst 11:   ret
; }}

function %f37(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_uint.i32 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 11)
;   Inst 0:   fcmp d0, d0
;   Inst 1:   b.vc 8 ; udf
;   Inst 2:   fmov d1, #-1
;   Inst 3:   fcmp d0, d1
;   Inst 4:   b.gt 8 ; udf
;   Inst 5:   movz x0, #16880, LSL #48
;   Inst 6:   fmov d1, x0
;   Inst 7:   fcmp d0, d1
;   Inst 8:   b.mi 8 ; udf
;   Inst 9:   fcvtzu w0, d0
;   Inst 10:   ret
; }}

function %f38(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_sint.i32 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 11)
;   Inst 0:   fcmp d0, d0
;   Inst 1:   b.vc 8 ; udf
;   Inst 2:   ldr d1, pc+8 ; b 12 ; data.f64 -2147483649
;   Inst 3:   fcmp d0, d1
;   Inst 4:   b.gt 8 ; udf
;   Inst 5:   movz x0, #16864, LSL #48
;   Inst 6:   fmov d1, x0
;   Inst 7:   fcmp d0, d1
;   Inst 8:   b.mi 8 ; udf
;   Inst 9:   fcvtzs w0, d0
;   Inst 10:   ret
; }}

function %f39(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_uint.i64 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 11)
;   Inst 0:   fcmp d0, d0
;   Inst 1:   b.vc 8 ; udf
;   Inst 2:   fmov d1, #-1
;   Inst 3:   fcmp d0, d1
;   Inst 4:   b.gt 8 ; udf
;   Inst 5:   movz x0, #17392, LSL #48
;   Inst 6:   fmov d1, x0
;   Inst 7:   fcmp d0, d1
;   Inst 8:   b.mi 8 ; udf
;   Inst 9:   fcvtzu x0, d0
;   Inst 10:   ret
; }}

function %f40(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_sint.i64 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 12)
;   Inst 0:   fcmp d0, d0
;   Inst 1:   b.vc 8 ; udf
;   Inst 2:   movz x0, #50144, LSL #48
;   Inst 3:   fmov d1, x0
;   Inst 4:   fcmp d0, d1
;   Inst 5:   b.ge 8 ; udf
;   Inst 6:   movz x0, #17376, LSL #48
;   Inst 7:   fmov d1, x0
;   Inst 8:   fcmp d0, d1
;   Inst 9:   b.mi 8 ; udf
;   Inst 10:   fcvtzs x0, d0
;   Inst 11:   ret
; }}

function %f41(i32) -> f32 {
block0(v0: i32):
  v1 = fcvt_from_uint.f32 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   ucvtf s0, w0
;   Inst 1:   ret
; }}

function %f42(i32) -> f32 {
block0(v0: i32):
  v1 = fcvt_from_sint.f32 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   scvtf s0, w0
;   Inst 1:   ret
; }}

function %f43(i64) -> f32 {
block0(v0: i64):
  v1 = fcvt_from_uint.f32 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   ucvtf s0, x0
;   Inst 1:   ret
; }}

function %f44(i64) -> f32 {
block0(v0: i64):
  v1 = fcvt_from_sint.f32 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   scvtf s0, x0
;   Inst 1:   ret
; }}

function %f45(i32) -> f64 {
block0(v0: i32):
  v1 = fcvt_from_uint.f64 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   ucvtf d0, w0
;   Inst 1:   ret
; }}

function %f46(i32) -> f64 {
block0(v0: i32):
  v1 = fcvt_from_sint.f64 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   scvtf d0, w0
;   Inst 1:   ret
; }}

function %f47(i64) -> f64 {
block0(v0: i64):
  v1 = fcvt_from_uint.f64 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   ucvtf d0, x0
;   Inst 1:   ret
; }}

function %f48(i64) -> f64 {
block0(v0: i64):
  v1 = fcvt_from_sint.f64 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   scvtf d0, x0
;   Inst 1:   ret
; }}

function %f49(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_uint_sat.i32 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 9)
;   Inst 0:   movz x0, #20352, LSL #16
;   Inst 1:   fmov s1, w0
;   Inst 2:   fmin s2, s0, s1
;   Inst 3:   movi v1.2s, #0
;   Inst 4:   fmax s2, s2, s1
;   Inst 5:   fcmp s0, s0
;   Inst 6:   fcsel s0, s1, s2, ne
;   Inst 7:   fcvtzu w0, s0
;   Inst 8:   ret
; }}

function %f50(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_sint_sat.i32 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 11)
;   Inst 0:   movz x0, #20224, LSL #16
;   Inst 1:   fmov s1, w0
;   Inst 2:   fmin s1, s0, s1
;   Inst 3:   movz x0, #52992, LSL #16
;   Inst 4:   fmov s2, w0
;   Inst 5:   fmax s1, s1, s2
;   Inst 6:   movi v2.2s, #0
;   Inst 7:   fcmp s0, s0
;   Inst 8:   fcsel s0, s2, s1, ne
;   Inst 9:   fcvtzs w0, s0
;   Inst 10:   ret
; }}

function %f51(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_uint_sat.i64 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 9)
;   Inst 0:   movz x0, #24448, LSL #16
;   Inst 1:   fmov s1, w0
;   Inst 2:   fmin s2, s0, s1
;   Inst 3:   movi v1.2s, #0
;   Inst 4:   fmax s2, s2, s1
;   Inst 5:   fcmp s0, s0
;   Inst 6:   fcsel s0, s1, s2, ne
;   Inst 7:   fcvtzu x0, s0
;   Inst 8:   ret
; }}

function %f52(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_sint_sat.i64 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 11)
;   Inst 0:   movz x0, #24320, LSL #16
;   Inst 1:   fmov s1, w0
;   Inst 2:   fmin s1, s0, s1
;   Inst 3:   movz x0, #57088, LSL #16
;   Inst 4:   fmov s2, w0
;   Inst 5:   fmax s1, s1, s2
;   Inst 6:   movi v2.2s, #0
;   Inst 7:   fcmp s0, s0
;   Inst 8:   fcsel s0, s2, s1, ne
;   Inst 9:   fcvtzs x0, s0
;   Inst 10:   ret
; }}

function %f53(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_uint_sat.i32 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 8)
;   Inst 0:   ldr d1, pc+8 ; b 12 ; data.f64 4294967295
;   Inst 1:   fmin d2, d0, d1
;   Inst 2:   movi v1.2s, #0
;   Inst 3:   fmax d2, d2, d1
;   Inst 4:   fcmp d0, d0
;   Inst 5:   fcsel d0, d1, d2, ne
;   Inst 6:   fcvtzu w0, d0
;   Inst 7:   ret
; }}

function %f54(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_sint_sat.i32 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 10)
;   Inst 0:   ldr d1, pc+8 ; b 12 ; data.f64 2147483647
;   Inst 1:   fmin d1, d0, d1
;   Inst 2:   movz x0, #49632, LSL #48
;   Inst 3:   fmov d2, x0
;   Inst 4:   fmax d1, d1, d2
;   Inst 5:   movi v2.2s, #0
;   Inst 6:   fcmp d0, d0
;   Inst 7:   fcsel d0, d2, d1, ne
;   Inst 8:   fcvtzs w0, d0
;   Inst 9:   ret
; }}

function %f55(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_uint_sat.i64 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 9)
;   Inst 0:   movz x0, #17392, LSL #48
;   Inst 1:   fmov d1, x0
;   Inst 2:   fmin d2, d0, d1
;   Inst 3:   movi v1.2s, #0
;   Inst 4:   fmax d2, d2, d1
;   Inst 5:   fcmp d0, d0
;   Inst 6:   fcsel d0, d1, d2, ne
;   Inst 7:   fcvtzu x0, d0
;   Inst 8:   ret
; }}

function %f56(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_sint_sat.i64 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 11)
;   Inst 0:   movz x0, #17376, LSL #48
;   Inst 1:   fmov d1, x0
;   Inst 2:   fmin d1, d0, d1
;   Inst 3:   movz x0, #50144, LSL #48
;   Inst 4:   fmov d2, x0
;   Inst 5:   fmax d1, d1, d2
;   Inst 6:   movi v2.2s, #0
;   Inst 7:   fcmp d0, d0
;   Inst 8:   fcsel d0, d2, d1, ne
;   Inst 9:   fcvtzs x0, d0
;   Inst 10:   ret
; }}

