test compile precise-output
set unwind_info=false
target aarch64

function %f(i64, i64) -> b1 {
block0(v0: i64, v1: i64):
  v2 = icmp eq v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 3)
;   Inst 0:   subs xzr, x0, x1
;   Inst 1:   cset x0, eq
;   Inst 2:   ret
; }}

function %icmp_eq_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp eq v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 5)
;   Inst 0:   eor x0, x0, x2
;   Inst 1:   eor x1, x1, x3
;   Inst 2:   adds xzr, x0, x1
;   Inst 3:   cset x0, eq
;   Inst 4:   ret
; }}

function %icmp_ne_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp ne v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 5)
;   Inst 0:   eor x0, x0, x2
;   Inst 1:   eor x1, x1, x3
;   Inst 2:   adds xzr, x0, x1
;   Inst 3:   cset x0, ne
;   Inst 4:   ret
; }}

function %icmp_slt_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp slt v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 6)
;   Inst 0:   subs xzr, x0, x2
;   Inst 1:   cset x0, lo
;   Inst 2:   subs xzr, x1, x3
;   Inst 3:   cset x1, lt
;   Inst 4:   csel x0, x0, x1, eq
;   Inst 5:   ret
; }}

function %icmp_ult_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp ult v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 6)
;   Inst 0:   subs xzr, x0, x2
;   Inst 1:   cset x0, lo
;   Inst 2:   subs xzr, x1, x3
;   Inst 3:   cset x1, lo
;   Inst 4:   csel x0, x0, x1, eq
;   Inst 5:   ret
; }}

function %icmp_sle_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp sle v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 6)
;   Inst 0:   subs xzr, x0, x2
;   Inst 1:   cset x0, ls
;   Inst 2:   subs xzr, x1, x3
;   Inst 3:   cset x1, le
;   Inst 4:   csel x0, x0, x1, eq
;   Inst 5:   ret
; }}

function %icmp_ule_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp ule v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 6)
;   Inst 0:   subs xzr, x0, x2
;   Inst 1:   cset x0, ls
;   Inst 2:   subs xzr, x1, x3
;   Inst 3:   cset x1, ls
;   Inst 4:   csel x0, x0, x1, eq
;   Inst 5:   ret
; }}

function %icmp_sgt_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp sgt v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 6)
;   Inst 0:   subs xzr, x0, x2
;   Inst 1:   cset x0, hi
;   Inst 2:   subs xzr, x1, x3
;   Inst 3:   cset x1, gt
;   Inst 4:   csel x0, x0, x1, eq
;   Inst 5:   ret
; }}

function %icmp_ugt_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp ugt v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 6)
;   Inst 0:   subs xzr, x0, x2
;   Inst 1:   cset x0, hi
;   Inst 2:   subs xzr, x1, x3
;   Inst 3:   cset x1, hi
;   Inst 4:   csel x0, x0, x1, eq
;   Inst 5:   ret
; }}

function %icmp_sge_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp sge v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 6)
;   Inst 0:   subs xzr, x0, x2
;   Inst 1:   cset x0, hs
;   Inst 2:   subs xzr, x1, x3
;   Inst 3:   cset x1, ge
;   Inst 4:   csel x0, x0, x1, eq
;   Inst 5:   ret
; }}

function %icmp_uge_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp uge v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 6)
;   Inst 0:   subs xzr, x0, x2
;   Inst 1:   cset x0, hs
;   Inst 2:   subs xzr, x1, x3
;   Inst 3:   cset x1, hs
;   Inst 4:   csel x0, x0, x1, eq
;   Inst 5:   ret
; }}

function %icmp_of_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp of v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 4)
;   Inst 0:   adds xzr, x0, x2
;   Inst 1:   adcs xzr, x1, x3
;   Inst 2:   cset x0, vs
;   Inst 3:   ret
; }}

function %icmp_nof_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp nof v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 4)
;   Inst 0:   adds xzr, x0, x2
;   Inst 1:   adcs xzr, x1, x3
;   Inst 2:   cset x0, vc
;   Inst 3:   ret
; }}

function %f(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = ifcmp v0, v1
  brif eq v2, block1
  jump block2

block1:
  v4 = iconst.i64 1
  return v4

block2:
  v5 = iconst.i64 2
  return v5
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 1)
;   (successor: Block 2)
;   (instruction range: 0 .. 2)
;   Inst 0:   subs xzr, x0, x1
;   Inst 1:   b.eq label1 ; b label2
; Block 1:
;   (original IR block: block1)
;   (instruction range: 2 .. 4)
;   Inst 2:   movz x0, #1
;   Inst 3:   ret
; Block 2:
;   (original IR block: block2)
;   (instruction range: 4 .. 6)
;   Inst 4:   movz x0, #2
;   Inst 5:   ret
; }}

function %f(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = ifcmp v0, v1
  brif eq v2, block1
  jump block1

block1:
  v4 = iconst.i64 1
  return v4
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 1)
;   (successor: Block 2)
;   (instruction range: 0 .. 2)
;   Inst 0:   subs xzr, x0, x1
;   Inst 1:   b.eq label1 ; b label2
; Block 1:
;   (successor: Block 3)
;   (instruction range: 2 .. 3)
;   Inst 2:   b label3
; Block 2:
;   (successor: Block 3)
;   (instruction range: 3 .. 4)
;   Inst 3:   b label3
; Block 3:
;   (original IR block: block1)
;   (instruction range: 4 .. 6)
;   Inst 4:   movz x0, #1
;   Inst 5:   ret
; }}

function %i128_brz(i128){
block0(v0: i128):
    brz v0, block1
    jump block1

block1:
    nop
    return
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 1)
;   (successor: Block 2)
;   (instruction range: 0 .. 2)
;   Inst 0:   orr x0, x0, x1
;   Inst 1:   cbz x0, label1 ; b label2
; Block 1:
;   (successor: Block 3)
;   (instruction range: 2 .. 3)
;   Inst 2:   b label3
; Block 2:
;   (successor: Block 3)
;   (instruction range: 3 .. 4)
;   Inst 3:   b label3
; Block 3:
;   (original IR block: block1)
;   (instruction range: 4 .. 5)
;   Inst 4:   ret
; }}

function %i128_brnz(i128){
block0(v0: i128):
    brnz v0, block1
    jump block1

block1:
    nop
    return
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 1)
;   (successor: Block 2)
;   (instruction range: 0 .. 2)
;   Inst 0:   orr x0, x0, x1
;   Inst 1:   cbnz x0, label1 ; b label2
; Block 1:
;   (successor: Block 3)
;   (instruction range: 2 .. 3)
;   Inst 2:   b label3
; Block 2:
;   (successor: Block 3)
;   (instruction range: 3 .. 4)
;   Inst 3:   b label3
; Block 3:
;   (original IR block: block1)
;   (instruction range: 4 .. 5)
;   Inst 4:   ret
; }}

function %i128_bricmp_eq(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp eq v0, v1, block1
  jump block1

block1:
  return
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 1)
;   (successor: Block 2)
;   (instruction range: 0 .. 4)
;   Inst 0:   eor x0, x0, x2
;   Inst 1:   eor x1, x1, x3
;   Inst 2:   adds xzr, x0, x1
;   Inst 3:   b.eq label1 ; b label2
; Block 1:
;   (successor: Block 3)
;   (instruction range: 4 .. 5)
;   Inst 4:   b label3
; Block 2:
;   (successor: Block 3)
;   (instruction range: 5 .. 6)
;   Inst 5:   b label3
; Block 3:
;   (original IR block: block1)
;   (instruction range: 6 .. 7)
;   Inst 6:   ret
; }}

function %i128_bricmp_ne(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp ne v0, v1, block1
  jump block1

block1:
  return
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 1)
;   (successor: Block 2)
;   (instruction range: 0 .. 4)
;   Inst 0:   eor x0, x0, x2
;   Inst 1:   eor x1, x1, x3
;   Inst 2:   adds xzr, x0, x1
;   Inst 3:   b.ne label1 ; b label2
; Block 1:
;   (successor: Block 3)
;   (instruction range: 4 .. 5)
;   Inst 4:   b label3
; Block 2:
;   (successor: Block 3)
;   (instruction range: 5 .. 6)
;   Inst 5:   b label3
; Block 3:
;   (original IR block: block1)
;   (instruction range: 6 .. 7)
;   Inst 6:   ret
; }}

function %i128_bricmp_slt(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp slt v0, v1, block1
  jump block1

block1:
  return
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 1)
;   (successor: Block 2)
;   (instruction range: 0 .. 7)
;   Inst 0:   subs xzr, x0, x2
;   Inst 1:   cset x0, lo
;   Inst 2:   subs xzr, x1, x3
;   Inst 3:   cset x1, lt
;   Inst 4:   csel x0, x0, x1, eq
;   Inst 5:   subs xzr, xzr, x0
;   Inst 6:   b.lt label1 ; b label2
; Block 1:
;   (successor: Block 3)
;   (instruction range: 7 .. 8)
;   Inst 7:   b label3
; Block 2:
;   (successor: Block 3)
;   (instruction range: 8 .. 9)
;   Inst 8:   b label3
; Block 3:
;   (original IR block: block1)
;   (instruction range: 9 .. 10)
;   Inst 9:   ret
; }}

function %i128_bricmp_ult(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp ult v0, v1, block1
  jump block1

block1:
  return
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 1)
;   (successor: Block 2)
;   (instruction range: 0 .. 7)
;   Inst 0:   subs xzr, x0, x2
;   Inst 1:   cset x0, lo
;   Inst 2:   subs xzr, x1, x3
;   Inst 3:   cset x1, lo
;   Inst 4:   csel x0, x0, x1, eq
;   Inst 5:   subs xzr, xzr, x0
;   Inst 6:   b.lo label1 ; b label2
; Block 1:
;   (successor: Block 3)
;   (instruction range: 7 .. 8)
;   Inst 7:   b label3
; Block 2:
;   (successor: Block 3)
;   (instruction range: 8 .. 9)
;   Inst 8:   b label3
; Block 3:
;   (original IR block: block1)
;   (instruction range: 9 .. 10)
;   Inst 9:   ret
; }}

function %i128_bricmp_sle(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp sle v0, v1, block1
  jump block1

block1:
  return
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 1)
;   (successor: Block 2)
;   (instruction range: 0 .. 8)
;   Inst 0:   subs xzr, x0, x2
;   Inst 1:   cset x0, ls
;   Inst 2:   subs xzr, x1, x3
;   Inst 3:   cset x1, le
;   Inst 4:   csel x0, x0, x1, eq
;   Inst 5:   movz x1, #1
;   Inst 6:   subs xzr, x1, x0
;   Inst 7:   b.le label1 ; b label2
; Block 1:
;   (successor: Block 3)
;   (instruction range: 8 .. 9)
;   Inst 8:   b label3
; Block 2:
;   (successor: Block 3)
;   (instruction range: 9 .. 10)
;   Inst 9:   b label3
; Block 3:
;   (original IR block: block1)
;   (instruction range: 10 .. 11)
;   Inst 10:   ret
; }}

function %i128_bricmp_ule(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp ule v0, v1, block1
  jump block1

block1:
  return
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 1)
;   (successor: Block 2)
;   (instruction range: 0 .. 8)
;   Inst 0:   subs xzr, x0, x2
;   Inst 1:   cset x0, ls
;   Inst 2:   subs xzr, x1, x3
;   Inst 3:   cset x1, ls
;   Inst 4:   csel x0, x0, x1, eq
;   Inst 5:   movz x1, #1
;   Inst 6:   subs xzr, x1, x0
;   Inst 7:   b.ls label1 ; b label2
; Block 1:
;   (successor: Block 3)
;   (instruction range: 8 .. 9)
;   Inst 8:   b label3
; Block 2:
;   (successor: Block 3)
;   (instruction range: 9 .. 10)
;   Inst 9:   b label3
; Block 3:
;   (original IR block: block1)
;   (instruction range: 10 .. 11)
;   Inst 10:   ret
; }}

function %i128_bricmp_sgt(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp sgt v0, v1, block1
  jump block1

block1:
  return
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 1)
;   (successor: Block 2)
;   (instruction range: 0 .. 7)
;   Inst 0:   subs xzr, x0, x2
;   Inst 1:   cset x0, hi
;   Inst 2:   subs xzr, x1, x3
;   Inst 3:   cset x1, gt
;   Inst 4:   csel x0, x0, x1, eq
;   Inst 5:   subs xzr, x0, xzr
;   Inst 6:   b.gt label1 ; b label2
; Block 1:
;   (successor: Block 3)
;   (instruction range: 7 .. 8)
;   Inst 7:   b label3
; Block 2:
;   (successor: Block 3)
;   (instruction range: 8 .. 9)
;   Inst 8:   b label3
; Block 3:
;   (original IR block: block1)
;   (instruction range: 9 .. 10)
;   Inst 9:   ret
; }}

function %i128_bricmp_ugt(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp ugt v0, v1, block1
  jump block1

block1:
  return
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 1)
;   (successor: Block 2)
;   (instruction range: 0 .. 7)
;   Inst 0:   subs xzr, x0, x2
;   Inst 1:   cset x0, hi
;   Inst 2:   subs xzr, x1, x3
;   Inst 3:   cset x1, hi
;   Inst 4:   csel x0, x0, x1, eq
;   Inst 5:   subs xzr, x0, xzr
;   Inst 6:   b.hi label1 ; b label2
; Block 1:
;   (successor: Block 3)
;   (instruction range: 7 .. 8)
;   Inst 7:   b label3
; Block 2:
;   (successor: Block 3)
;   (instruction range: 8 .. 9)
;   Inst 8:   b label3
; Block 3:
;   (original IR block: block1)
;   (instruction range: 9 .. 10)
;   Inst 9:   ret
; }}

function %i128_bricmp_sge(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp sge v0, v1, block1
  jump block1

block1:
  return
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 1)
;   (successor: Block 2)
;   (instruction range: 0 .. 8)
;   Inst 0:   subs xzr, x0, x2
;   Inst 1:   cset x0, hs
;   Inst 2:   subs xzr, x1, x3
;   Inst 3:   cset x1, ge
;   Inst 4:   csel x0, x0, x1, eq
;   Inst 5:   movz x1, #1
;   Inst 6:   subs xzr, x0, x1
;   Inst 7:   b.ge label1 ; b label2
; Block 1:
;   (successor: Block 3)
;   (instruction range: 8 .. 9)
;   Inst 8:   b label3
; Block 2:
;   (successor: Block 3)
;   (instruction range: 9 .. 10)
;   Inst 9:   b label3
; Block 3:
;   (original IR block: block1)
;   (instruction range: 10 .. 11)
;   Inst 10:   ret
; }}

function %i128_bricmp_uge(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp uge v0, v1, block1
  jump block1

block1:
  return
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 1)
;   (successor: Block 2)
;   (instruction range: 0 .. 8)
;   Inst 0:   subs xzr, x0, x2
;   Inst 1:   cset x0, hs
;   Inst 2:   subs xzr, x1, x3
;   Inst 3:   cset x1, hs
;   Inst 4:   csel x0, x0, x1, eq
;   Inst 5:   movz x1, #1
;   Inst 6:   subs xzr, x0, x1
;   Inst 7:   b.hs label1 ; b label2
; Block 1:
;   (successor: Block 3)
;   (instruction range: 8 .. 9)
;   Inst 8:   b label3
; Block 2:
;   (successor: Block 3)
;   (instruction range: 9 .. 10)
;   Inst 9:   b label3
; Block 3:
;   (original IR block: block1)
;   (instruction range: 10 .. 11)
;   Inst 10:   ret
; }}

function %i128_bricmp_of(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp of v0, v1, block1
  jump block1

block1:
  return
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 1)
;   (successor: Block 2)
;   (instruction range: 0 .. 3)
;   Inst 0:   adds xzr, x0, x2
;   Inst 1:   adcs xzr, x1, x3
;   Inst 2:   b.vs label1 ; b label2
; Block 1:
;   (successor: Block 3)
;   (instruction range: 3 .. 4)
;   Inst 3:   b label3
; Block 2:
;   (successor: Block 3)
;   (instruction range: 4 .. 5)
;   Inst 4:   b label3
; Block 3:
;   (original IR block: block1)
;   (instruction range: 5 .. 6)
;   Inst 5:   ret
; }}

function %i128_bricmp_nof(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp nof v0, v1, block1
  jump block1

block1:
  return
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (successor: Block 1)
;   (successor: Block 2)
;   (instruction range: 0 .. 3)
;   Inst 0:   adds xzr, x0, x2
;   Inst 1:   adcs xzr, x1, x3
;   Inst 2:   b.vc label1 ; b label2
; Block 1:
;   (successor: Block 3)
;   (instruction range: 3 .. 4)
;   Inst 3:   b label3
; Block 2:
;   (successor: Block 3)
;   (instruction range: 4 .. 5)
;   Inst 4:   b label3
; Block 3:
;   (original IR block: block1)
;   (instruction range: 5 .. 6)
;   Inst 5:   ret
; }}

