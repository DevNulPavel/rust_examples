test compile precise-output
set unwind_info=false
target aarch64

function %f_u_8_64(i8) -> i64 {
block0(v0: i8):
  v1 = uextend.i64 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   uxtb w0, w0
;   Inst 1:   ret
; }}

function %f_u_8_32(i8) -> i32 {
block0(v0: i8):
  v1 = uextend.i32 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   uxtb w0, w0
;   Inst 1:   ret
; }}

function %f_u_8_16(i8) -> i16 {
block0(v0: i8):
  v1 = uextend.i16 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   uxtb w0, w0
;   Inst 1:   ret
; }}

function %f_s_8_64(i8) -> i64 {
block0(v0: i8):
  v1 = sextend.i64 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   sxtb x0, w0
;   Inst 1:   ret
; }}

function %f_s_8_32(i8) -> i32 {
block0(v0: i8):
  v1 = sextend.i32 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   sxtb w0, w0
;   Inst 1:   ret
; }}

function %f_s_8_16(i8) -> i16 {
block0(v0: i8):
  v1 = sextend.i16 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   sxtb w0, w0
;   Inst 1:   ret
; }}

function %f_u_16_64(i16) -> i64 {
block0(v0: i16):
  v1 = uextend.i64 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   uxth w0, w0
;   Inst 1:   ret
; }}

function %f_u_16_32(i16) -> i32 {
block0(v0: i16):
  v1 = uextend.i32 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   uxth w0, w0
;   Inst 1:   ret
; }}

function %f_s_16_64(i16) -> i64 {
block0(v0: i16):
  v1 = sextend.i64 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   sxth x0, w0
;   Inst 1:   ret
; }}

function %f_s_16_32(i16) -> i32 {
block0(v0: i16):
  v1 = sextend.i32 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   sxth w0, w0
;   Inst 1:   ret
; }}

function %f_u_32_64(i32) -> i64 {
block0(v0: i32):
  v1 = uextend.i64 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   mov w0, w0
;   Inst 1:   ret
; }}

function %f_s_32_64(i32) -> i64 {
block0(v0: i32):
  v1 = sextend.i64 v0
  return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   sxtw x0, w0
;   Inst 1:   ret
; }}

