test run
target aarch64
target x86_64
target s390x


function %ishl_i64_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = ishl.i64 v0, v1
    return v2
}
; run: %ishl_i64_i64(0x00000000_00000000, 0) == 0x00000000_00000000
; run: %ishl_i64_i64(0x00000000_00000000, 1) == 0x00000000_00000000
; run: %ishl_i64_i64(0x0000000f_0000000f, 0) == 0x0000000f_0000000f
; run: %ishl_i64_i64(0x0000000f_0000000f, 4) == 0x000000f0_000000f0
; run: %ishl_i64_i64(0x00000000_00000004, 64) == 0x00000000_00000004
; run: %ishl_i64_i64(0x00000000_00000004, 65) == 0x00000000_00000008
; run: %ishl_i64_i64(0x00000000_00000004, 66) == 0x00000000_00000010

function %ishl_i64_i32(i64, i32) -> i64 {
block0(v0: i64, v1: i32):
    v2 = ishl.i64 v0, v1
    return v2
}
; run: %ishl_i64_i32(0x00000000_00000000, 0) == 0x00000000_00000000
; run: %ishl_i64_i32(0x00000000_00000000, 1) == 0x00000000_00000000
; run: %ishl_i64_i32(0x0000000f_0000000f, 0) == 0x0000000f_0000000f
; run: %ishl_i64_i32(0x0000000f_0000000f, 4) == 0x000000f0_000000f0
; run: %ishl_i64_i32(0x00000000_00000004, 64) == 0x00000000_00000004
; run: %ishl_i64_i32(0x00000000_00000004, 65) == 0x00000000_00000008
; run: %ishl_i64_i32(0x00000000_00000004, 66) == 0x00000000_00000010

function %ishl_i64_i16(i64, i16) -> i64 {
block0(v0: i64, v1: i16):
    v2 = ishl.i64 v0, v1
    return v2
}
; run: %ishl_i64_i16(0x00000000_00000000, 0) == 0x00000000_00000000
; run: %ishl_i64_i16(0x00000000_00000000, 1) == 0x00000000_00000000
; run: %ishl_i64_i16(0x0000000f_0000000f, 0) == 0x0000000f_0000000f
; run: %ishl_i64_i16(0x0000000f_0000000f, 4) == 0x000000f0_000000f0
; run: %ishl_i64_i16(0x00000000_00000004, 64) == 0x00000000_00000004
; run: %ishl_i64_i16(0x00000000_00000004, 65) == 0x00000000_00000008
; run: %ishl_i64_i16(0x00000000_00000004, 66) == 0x00000000_00000010

function %ishl_i64_i8(i64, i8) -> i64 {
block0(v0: i64, v1: i8):
    v2 = ishl.i64 v0, v1
    return v2
}
; run: %ishl_i64_i8(0x00000000_00000000, 0) == 0x00000000_00000000
; run: %ishl_i64_i8(0x00000000_00000000, 1) == 0x00000000_00000000
; run: %ishl_i64_i8(0x0000000f_0000000f, 0) == 0x0000000f_0000000f
; run: %ishl_i64_i8(0x0000000f_0000000f, 4) == 0x000000f0_000000f0
; run: %ishl_i64_i8(0x00000000_00000004, 64) == 0x00000000_00000004
; run: %ishl_i64_i8(0x00000000_00000004, 65) == 0x00000000_00000008
; run: %ishl_i64_i8(0x00000000_00000004, 66) == 0x00000000_00000010


function %ishl_i32_i64(i32, i64) -> i32 {
block0(v0: i32, v1: i64):
    v2 = ishl.i32 v0, v1
    return v2
}
; run: %ishl_i32_i64(0x00000000, 0) == 0x00000000
; run: %ishl_i32_i64(0x00000000, 1) == 0x00000000
; run: %ishl_i32_i64(0x0000000f, 0) == 0x0000000f
; run: %ishl_i32_i64(0x0000000f, 4) == 0x000000f0
; run: %ishl_i32_i64(0x00000004, 32) == 0x00000004
; run: %ishl_i32_i64(0x00000004, 33) == 0x00000008
; run: %ishl_i32_i64(0x00000004, 34) == 0x00000010

function %ishl_i32_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = ishl.i32 v0, v1
    return v2
}
; run: %ishl_i32_i32(0x00000000, 0) == 0x00000000
; run: %ishl_i32_i32(0x00000000, 1) == 0x00000000
; run: %ishl_i32_i32(0x0000000f, 0) == 0x0000000f
; run: %ishl_i32_i32(0x0000000f, 4) == 0x000000f0
; run: %ishl_i32_i32(0x00000004, 32) == 0x00000004
; run: %ishl_i32_i32(0x00000004, 33) == 0x00000008
; run: %ishl_i32_i32(0x00000004, 34) == 0x00000010

function %ishl_i32_i16(i32, i16) -> i32 {
block0(v0: i32, v1: i16):
    v2 = ishl.i32 v0, v1
    return v2
}
; run: %ishl_i32_i16(0x00000000, 0) == 0x00000000
; run: %ishl_i32_i16(0x00000000, 1) == 0x00000000
; run: %ishl_i32_i16(0x0000000f, 0) == 0x0000000f
; run: %ishl_i32_i16(0x0000000f, 4) == 0x000000f0
; run: %ishl_i32_i16(0x00000004, 32) == 0x00000004
; run: %ishl_i32_i16(0x00000004, 33) == 0x00000008
; run: %ishl_i32_i16(0x00000004, 34) == 0x00000010

function %ishl_i32_i8(i32, i8) -> i32 {
block0(v0: i32, v1: i8):
    v2 = ishl.i32 v0, v1
    return v2
}
; run: %ishl_i32_i8(0x00000000, 0) == 0x00000000
; run: %ishl_i32_i8(0x00000000, 1) == 0x00000000
; run: %ishl_i32_i8(0x0000000f, 0) == 0x0000000f
; run: %ishl_i32_i8(0x0000000f, 4) == 0x000000f0
; run: %ishl_i32_i8(0x00000004, 32) == 0x00000004
; run: %ishl_i32_i8(0x00000004, 33) == 0x00000008
; run: %ishl_i32_i8(0x00000004, 34) == 0x00000010


function %ushr_i64_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = ushr.i64 v0, v1
    return v2
}
; run: %ushr_i64_i64(0x10000000_10000000, 0) == 0x10000000_10000000
; run: %ushr_i64_i64(0x10000000_10000000, 1) == 0x08000000_08000000
; run: %ushr_i64_i64(0xf0000000_f0000000, 0) == 0xf0000000_f0000000
; run: %ushr_i64_i64(0xf0000000_f0000000, 4) == 0x0f000000_0f000000
; run: %ushr_i64_i64(0x40000000_40000000, 64) == 0x40000000_40000000
; run: %ushr_i64_i64(0x40000000_40000000, 65) == 0x20000000_20000000
; run: %ushr_i64_i64(0x40000000_40000000, 66) == 0x10000000_10000000

function %ushr_i64_i32(i64, i32) -> i64 {
block0(v0: i64, v1: i32):
    v2 = ushr.i64 v0, v1
    return v2
}
; run: %ushr_i64_i32(0x10000000_10000000, 0) == 0x10000000_10000000
; run: %ushr_i64_i32(0x10000000_10000000, 1) == 0x08000000_08000000
; run: %ushr_i64_i32(0xf0000000_f0000000, 0) == 0xf0000000_f0000000
; run: %ushr_i64_i32(0xf0000000_f0000000, 4) == 0x0f000000_0f000000
; run: %ushr_i64_i32(0x40000000_40000000, 64) == 0x40000000_40000000
; run: %ushr_i64_i32(0x40000000_40000000, 65) == 0x20000000_20000000
; run: %ushr_i64_i32(0x40000000_40000000, 66) == 0x10000000_10000000

function %ushr_i64_i16(i64, i16) -> i64 {
block0(v0: i64, v1: i16):
    v2 = ushr.i64 v0, v1
    return v2
}
; run: %ushr_i64_i16(0x10000000_10000000, 0) == 0x10000000_10000000
; run: %ushr_i64_i16(0x10000000_10000000, 1) == 0x08000000_08000000
; run: %ushr_i64_i16(0xf0000000_f0000000, 0) == 0xf0000000_f0000000
; run: %ushr_i64_i16(0xf0000000_f0000000, 4) == 0x0f000000_0f000000
; run: %ushr_i64_i16(0x40000000_40000000, 64) == 0x40000000_40000000
; run: %ushr_i64_i16(0x40000000_40000000, 65) == 0x20000000_20000000
; run: %ushr_i64_i16(0x40000000_40000000, 66) == 0x10000000_10000000

function %ushr_i64_i8(i64, i8) -> i64 {
block0(v0: i64, v1: i8):
    v2 = ushr.i64 v0, v1
    return v2
}
; run: %ushr_i64_i8(0x10000000_10000000, 0) == 0x10000000_10000000
; run: %ushr_i64_i8(0x10000000_10000000, 1) == 0x08000000_08000000
; run: %ushr_i64_i8(0xf0000000_f0000000, 0) == 0xf0000000_f0000000
; run: %ushr_i64_i8(0xf0000000_f0000000, 4) == 0x0f000000_0f000000
; run: %ushr_i64_i8(0x40000000_40000000, 64) == 0x40000000_40000000
; run: %ushr_i64_i8(0x40000000_40000000, 65) == 0x20000000_20000000
; run: %ushr_i64_i8(0x40000000_40000000, 66) == 0x10000000_10000000

function %ushr_i32_i64(i32, i64) -> i32 {
block0(v0: i32, v1: i64):
    v2 = ushr.i32 v0, v1
    return v2
}
; run: %ushr_i32_i64(0x10000000, 0) == 0x10000000
; run: %ushr_i32_i64(0x10000000, 1) == 0x08000000
; run: %ushr_i32_i64(0xf0000000, 0) == 0xf0000000
; run: %ushr_i32_i64(0xf0000000, 4) == 0x0f000000
; run: %ushr_i32_i64(0x40000000, 32) == 0x40000000
; run: %ushr_i32_i64(0x40000000, 33) == 0x20000000
; run: %ushr_i32_i64(0x40000000, 34) == 0x10000000

function %ushr_i32_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = ushr.i32 v0, v1
    return v2
}
; run: %ushr_i32_i32(0x10000000, 0) == 0x10000000
; run: %ushr_i32_i32(0x10000000, 1) == 0x08000000
; run: %ushr_i32_i32(0xf0000000, 0) == 0xf0000000
; run: %ushr_i32_i32(0xf0000000, 4) == 0x0f000000
; run: %ushr_i32_i32(0x40000000, 32) == 0x40000000
; run: %ushr_i32_i32(0x40000000, 33) == 0x20000000
; run: %ushr_i32_i32(0x40000000, 34) == 0x10000000

function %ushr_i32_i16(i32, i16) -> i32 {
block0(v0: i32, v1: i16):
    v2 = ushr.i32 v0, v1
    return v2
}
; run: %ushr_i32_i16(0x10000000, 0) == 0x10000000
; run: %ushr_i32_i16(0x10000000, 1) == 0x08000000
; run: %ushr_i32_i16(0xf0000000, 0) == 0xf0000000
; run: %ushr_i32_i16(0xf0000000, 4) == 0x0f000000
; run: %ushr_i32_i16(0x40000000, 32) == 0x40000000
; run: %ushr_i32_i16(0x40000000, 33) == 0x20000000
; run: %ushr_i32_i16(0x40000000, 34) == 0x10000000

function %ushr_i32_i8(i32, i8) -> i32 {
block0(v0: i32, v1: i8):
    v2 = ushr.i32 v0, v1
    return v2
}
; run: %ushr_i32_i8(0x10000000, 0) == 0x10000000
; run: %ushr_i32_i8(0x10000000, 1) == 0x08000000
; run: %ushr_i32_i8(0xf0000000, 0) == 0xf0000000
; run: %ushr_i32_i8(0xf0000000, 4) == 0x0f000000
; run: %ushr_i32_i8(0x40000000, 32) == 0x40000000
; run: %ushr_i32_i8(0x40000000, 33) == 0x20000000
; run: %ushr_i32_i8(0x40000000, 34) == 0x10000000


function %sshr_i64_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = sshr.i64 v0, v1
    return v2
}
; run: %sshr_i64_i64(0x80000000_80000000, 0) == 0x80000000_80000000
; run: %sshr_i64_i64(0x80000000_80000000, 1) == 0xC0000000_40000000
; run: %sshr_i64_i64(0xf0000000_f0000000, 0) == 0xf0000000_f0000000
; run: %sshr_i64_i64(0xf0000000_f0000000, 4) == 0xff000000_0f000000
; run: %sshr_i64_i64(0x40000000_40000000, 64) == 0x40000000_40000000
; run: %sshr_i64_i64(0x40000000_40000000, 65) == 0x20000000_20000000
; run: %sshr_i64_i64(0x40000000_40000000, 66) == 0x10000000_10000000

function %sshr_i64_i32(i64, i32) -> i64 {
block0(v0: i64, v1: i32):
    v2 = sshr.i64 v0, v1
    return v2
}
; run: %sshr_i64_i32(0x80000000_80000000, 0) == 0x80000000_80000000
; run: %sshr_i64_i32(0x80000000_80000000, 1) == 0xC0000000_40000000
; run: %sshr_i64_i32(0xf0000000_f0000000, 0) == 0xf0000000_f0000000
; run: %sshr_i64_i32(0xf0000000_f0000000, 4) == 0xff000000_0f000000
; run: %sshr_i64_i32(0x40000000_40000000, 64) == 0x40000000_40000000
; run: %sshr_i64_i32(0x40000000_40000000, 65) == 0x20000000_20000000
; run: %sshr_i64_i32(0x40000000_40000000, 66) == 0x10000000_10000000

function %sshr_i64_i16(i64, i16) -> i64 {
block0(v0: i64, v1: i16):
    v2 = sshr.i64 v0, v1
    return v2
}
; run: %sshr_i64_i16(0x80000000_80000000, 0) == 0x80000000_80000000
; run: %sshr_i64_i16(0x80000000_80000000, 1) == 0xC0000000_40000000
; run: %sshr_i64_i16(0xf0000000_f0000000, 0) == 0xf0000000_f0000000
; run: %sshr_i64_i16(0xf0000000_f0000000, 4) == 0xff000000_0f000000
; run: %sshr_i64_i16(0x40000000_40000000, 64) == 0x40000000_40000000
; run: %sshr_i64_i16(0x40000000_40000000, 65) == 0x20000000_20000000
; run: %sshr_i64_i16(0x40000000_40000000, 66) == 0x10000000_10000000

function %sshr_i64_i8(i64, i8) -> i64 {
block0(v0: i64, v1: i8):
    v2 = sshr.i64 v0, v1
    return v2
}
; run: %sshr_i64_i8(0x80000000_80000000, 0) == 0x80000000_80000000
; run: %sshr_i64_i8(0x80000000_80000000, 1) == 0xC0000000_40000000
; run: %sshr_i64_i8(0xf0000000_f0000000, 0) == 0xf0000000_f0000000
; run: %sshr_i64_i8(0xf0000000_f0000000, 4) == 0xff000000_0f000000
; run: %sshr_i64_i8(0x40000000_40000000, 64) == 0x40000000_40000000
; run: %sshr_i64_i8(0x40000000_40000000, 65) == 0x20000000_20000000
; run: %sshr_i64_i8(0x40000000_40000000, 66) == 0x10000000_10000000

function %sshr_i32_i64(i32, i64) -> i32 {
block0(v0: i32, v1: i64):
    v2 = sshr.i32 v0, v1
    return v2
}
; run: %sshr_i32_i64(0x80000000, 0) == 0x80000000
; run: %sshr_i32_i64(0x80000000, 1) == 0xC0000000
; run: %sshr_i32_i64(0xf0000000, 0) == 0xf0000000
; run: %sshr_i32_i64(0xf0000000, 4) == 0xff000000
; run: %sshr_i32_i64(0x40000000, 32) == 0x40000000
; run: %sshr_i32_i64(0x40000000, 33) == 0x20000000
; run: %sshr_i32_i64(0x40000000, 34) == 0x10000000

function %sshr_i32_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = sshr.i32 v0, v1
    return v2
}
; run: %sshr_i32_i32(0x80000000, 0) == 0x80000000
; run: %sshr_i32_i32(0x80000000, 1) == 0xC0000000
; run: %sshr_i32_i32(0xf0000000, 0) == 0xf0000000
; run: %sshr_i32_i32(0xf0000000, 4) == 0xff000000
; run: %sshr_i32_i32(0x40000000, 32) == 0x40000000
; run: %sshr_i32_i32(0x40000000, 33) == 0x20000000
; run: %sshr_i32_i32(0x40000000, 34) == 0x10000000

function %sshr_i32_i16(i32, i16) -> i32 {
block0(v0: i32, v1: i16):
    v2 = sshr.i32 v0, v1
    return v2
}
; run: %sshr_i32_i16(0x80000000, 0) == 0x80000000
; run: %sshr_i32_i16(0x80000000, 1) == 0xC0000000
; run: %sshr_i32_i16(0xf0000000, 0) == 0xf0000000
; run: %sshr_i32_i16(0xf0000000, 4) == 0xff000000
; run: %sshr_i32_i16(0x40000000, 32) == 0x40000000
; run: %sshr_i32_i16(0x40000000, 33) == 0x20000000
; run: %sshr_i32_i16(0x40000000, 34) == 0x10000000

function %sshr_i32_i8(i32, i8) -> i32 {
block0(v0: i32, v1: i8):
    v2 = sshr.i32 v0, v1
    return v2
}
; run: %sshr_i32_i8(0x80000000, 0) == 0x80000000
; run: %sshr_i32_i8(0x80000000, 1) == 0xC0000000
; run: %sshr_i32_i8(0xf0000000, 0) == 0xf0000000
; run: %sshr_i32_i8(0xf0000000, 4) == 0xff000000
; run: %sshr_i32_i8(0x40000000, 32) == 0x40000000
; run: %sshr_i32_i8(0x40000000, 33) == 0x20000000
; run: %sshr_i32_i8(0x40000000, 34) == 0x10000000

function %rotl_i8_const_37(i8) -> i8 {
block0(v0: i8):
  v1 = iconst.i8 37
  v2 = rotl.i8 v0, v1
  return v2
}

; run: %rotl_i8_const_37(0x00) == 0x00
; run: %rotl_i8_const_37(0x01) == 0x20
; run: %rotl_i8_const_37(0x12) == 0x42

function %rotr_i8_const_37(i8) -> i8 {
block0(v0: i8):
  v1 = iconst.i8 37
  v2 = rotr.i8 v0, v1
  return v2
}

; run: %rotr_i8_const_37(0x00) == 0x00
; run: %rotr_i8_const_37(0x01) == 0x08
; run: %rotr_i8_const_37(0x12) == 0x90
