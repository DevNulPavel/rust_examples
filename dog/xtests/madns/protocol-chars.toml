# Character escaping

[[cmd]]
name = "Running with ‘ansi.str.example’ properly escapes the codes"
shell = "dog --colour=always ${MADNS_ARGS:-@madns.binarystar.systems:5301 --tcp} CNAME ansi.str.example"
stdout = { file = "outputs/ansi.str.example.ansitxt" }
stderr = { empty = true }
status = 0
tags = [ "protocol", "madns" ]

[[cmd]]
name = "Running with ‘newline.str.example’ properly escapes the newlines"
shell = "dog --colour=always ${MADNS_ARGS:-@madns.binarystar.systems:5301 --tcp} CNAME newline.str.example"
stdout = { file = "outputs/newline.str.example.ansitxt" }
stderr = { empty = true }
status = 0
tags = [ "protocol", "madns" ]

[[cmd]]
name = "Running with ‘null.str.example’ properly handles the null bytes"
shell = "dog --colour=always ${MADNS_ARGS:-@madns.binarystar.systems:5301 --tcp} CNAME null.str.example"
stdout = { file = "outputs/null.str.example.ansitxt" }
stderr = { empty = true }
status = 0
tags = [ "protocol", "madns" ]

[[cmd]]
name = "Running with ‘tab.str.example’ properly escapes the tabs"
shell = "dog --colour=always ${MADNS_ARGS:-@madns.binarystar.systems:5301 --tcp} CNAME tab.str.example"
stdout = { file = "outputs/tab.str.example.ansitxt" }
stderr = { empty = true }
status = 0
tags = [ "protocol", "madns" ]

[[cmd]]
name = "Running with ‘upperbit.str.example’ properly escapes the upper-bit characters"
shell = "dog --colour=always ${MADNS_ARGS:-@madns.binarystar.systems:5301 --tcp} CNAME upperbit.str.example"
stdout = { file = "outputs/upperbit.str.example.ansitxt" }
stderr = { empty = true }
status = 0
tags = [ "protocol", "madns" ]


# Character escaping (JSON)

[[cmd]]
name = "Running with ‘ansi.str.example --json’ properly escapes the codes in the JSON string"
shell = "dog --colour=always ${MADNS_ARGS:-@madns.binarystar.systems:5301 --tcp} CNAME ansi.str.example --json | jq"
stdout = { file = "outputs/ansi.str.example.json" }
stderr = { empty = true }
status = 0
tags = [ "protocol", "madns", "json" ]

[[cmd]]
name = "Running with ‘newline.str.example --json’ properly escapes the newlines in the JSON string"
shell = "dog --colour=always ${MADNS_ARGS:-@madns.binarystar.systems:5301 --tcp} CNAME newline.str.example --json | jq"
stdout = { file = "outputs/newline.str.example.json" }
stderr = { empty = true }
status = 0
tags = [ "protocol", "madns", "json" ]

[[cmd]]
name = "Running with ‘null.str.example --json’ properly handles the null bytes in the JSON string"
shell = "dog --colour=always ${MADNS_ARGS:-@madns.binarystar.systems:5301 --tcp} CNAME null.str.example --json | jq"
stdout = { file = "outputs/null.str.example.json" }
stderr = { empty = true }
status = 0
tags = [ "protocol", "madns", "json" ]

[[cmd]]
name = "Running with ‘tab.str.example --json’ properly escapes the tabs in the JSON string"
shell = "dog --colour=always ${MADNS_ARGS:-@madns.binarystar.systems:5301 --tcp} CNAME tab.str.example --json | jq"
stdout = { file = "outputs/tab.str.example.json" }
stderr = { empty = true }
status = 0
tags = [ "protocol", "madns", "json" ]

[[cmd]]
name = "Running with ‘upperbit.str.example --json’ properly escapes the upper-bit characters in the JSON string"
shell = "dog --colour=always ${MADNS_ARGS:-@madns.binarystar.systems:5301 --tcp} CNAME upperbit.str.example --json | jq"
stdout = { file = "outputs/upperbit.str.example.json" }
stderr = { empty = true }
status = 0
tags = [ "protocol", "madns", "json" ]
