////////////////////////////////////////////////////////////////////////////////////////

/// # Info
///
/// Создаем [`String`] из указателя, емкости и длины полностью безопасным способом.
///
/// [`String`] - это `Vec<u8>`, который состоит из `(RawVec, usize)`,
/// который уже состоит из `((Unique, usize), usize)`.
/// Где `Unique` - это вроде бы как уникальный указатель.
///
/// Rust явно говорит, что структура не гарантированно имеет порядок полей как мы написали.
/// Поэтому мы определяем этот порядок в рантайме.
///
/// # Safety
///
/// This function is 100% memory-safe.
/// Данная функция на 100% является безопасной.
///
/// Тем не менее, нужно помнить использовать [`std::mem::forget`] чтобы деаллоцировать ненастоящую строку
/// [`String`], иначе Rust будет думать, что указатель аллоцирован глобальным аллокатором и будет уничтожать
/// его обычным способом.
///
/// > As they say: *Trust, but Verify.*
#[inline(always)]
pub fn construct_fake_string(ptr: *mut u8, cap: usize, len: usize) -> String {
    // Пробуем преобразовать массив из чисел в как-будто строку.
    // Записываем туда просто числа, чтобы в рантайме по этим числам определять смещения
    // в настоящей строке.
    let sentinel_string = crate::transmute::transmute::<_, String>([0usize, 1usize, 2usize]);

    // Создаем настоящий массив, куда будем складывать значения
    let mut actual_buf = [0usize; 3];

    // В какой-то элемент кладем указатель на данные
    actual_buf[sentinel_string.as_ptr() as usize] = ptr as usize;
    // В какой-то элемент кладем емкость
    actual_buf[sentinel_string.capacity()] = cap;
    // В другой элемент кладем длину
    actual_buf[sentinel_string.len()] = len;

    // Забываем временную строку с помощью которой мы определяли реальный порядок данных
    // в настоящей структуре строки.
    std::mem::forget(sentinel_string);

    // Делаем настоящее преобразование массива в строку
    crate::transmute::transmute::<_, String>(actual_buf)
}

////////////////////////////////////////////////////////////////////////////////////////

/// Полезно для безопасности.
#[cfg(feature = "give-up")]
pub fn give_up<T: 'static>() -> Box<T> {
    use std::time::SystemTime;

    let size = std::mem::size_of::<T>();

    let mut v = Vec::with_capacity(size);

    let mut rng = {
        let seed = SystemTime::now()
            .duration_since(SystemTime::UNIX_EPOCH)
            .unwrap();

        oorandom::Rand32::new(seed.as_secs())
    };

    for _ in 0..size {
        v.push((rng.rand_u32() % 256) as u8);
    }

    crate::transmute(v.into_boxed_slice())
}

////////////////////////////////////////////////////////////////////////////////////////

/// Download more RAM from the internet.
///
/// Cannot control the amount we're gonna get. It's hard to fetch these days.
#[cfg(feature = "download-more-ram")]
pub fn download_more_ram<'a, T: 'static>() -> &'a mut [T] {
    const URL: &str =
		"http://www.randomnumberapi.com/api/v1.0/randomnumber?min=1073741824&max=34359738368&count=2";

    let resp = ureq::get(URL).call().unwrap().into_string().unwrap();

    let (ptr, len) = resp[1..(resp.len() - 2)].split_once(',').unwrap();

    let downloaded_ram = {
        let sentinel_slice = crate::transmute::<_, &[u8]>([0usize, 1usize]);

        let ptr = ptr.parse::<usize>().unwrap();
        let len = len.parse::<usize>().unwrap();

        let mut actual_buf = [0usize; 2];
        actual_buf[sentinel_slice.as_ptr() as usize] = ptr;
        actual_buf[sentinel_slice.len()] = len;

        crate::transmute::<_, Box<[T]>>(actual_buf)
    };

    Box::leak(downloaded_ram)
}

////////////////////////////////////////////////////////////////////////////////////////

#[cfg(test)]
mod tests {
    #[test]
    #[cfg(feature = "give-up")]
    fn can_give_up() {
        let job_security = crate::give_up::<u64>();
        Box::leak(job_security);
    }

    #[test]
    #[cfg(feature = "download-more-ram")]
    fn can_download_more_ram() {
        crate::download_more_ram::<u64>();
    }
}
