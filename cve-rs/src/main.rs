//! So far, all our bugs are implemented using a single soundness hole in the Rust compiler.
//!
//! The explanation is detailed in the [`lifetime_expansion`] module.
//!
//! ---
//!
//! До тех пор, пока все наши баг реализованы используя одну единственную дыру в Rust компиляторе.
//!
//! Объяснение подробное есть в модуле [`lifetime_expansion`].
//!
//! https://github.com/rust-lang/rust/issues/25860
//!

////////////////////////////////////////////////////////////////////////////////////////

#![deny(unsafe_code)]

////////////////////////////////////////////////////////////////////////////////////////

mod demos;
mod help_text;
mod helpers;
mod expansion;
mod transmute;

////////////////////////////////////////////////////////////////////////////////////////

use self::{
    demos::{
        buffer_overflow::buffer_overflow_demo, segfault::segfault_demo, transmute::transmute_demo,
        use_after_free::use_after_free_demo,
    },
    help_text::HELP_TEXT,
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

fn main() {
    // Парсим аргументы командной строки
    let mut args = std::env::args();

    // Пропускаем первый параметр с именем программы
    let _program = args.next();

    // Если конкретной команды нету, тогда выполняем вывод помощи
    let Some(subcommand) = args.next() else {
        println!("{HELP_TEXT}");
        return;
    };

    // Выполняем нужную подкоманду
    match subcommand.as_str() {
        // Использование после деаллокации
        "uaf" => use_after_free_demo(),

        // Сигфолт
        "segfault" => segfault_demo(),

        // Переполнение буфера
        "bo" => buffer_overflow_demo(),

        // Transmute
        "transition" => transmute_demo(),

        // Вы под различной помощи
        "help" | "--help" | "h" | "-h" | "?" | "-?" => println!("{HELP_TEXT}"),

        // Не знаем что за команда
        other => println!("Error: Unknown command `{other}`.\n{HELP_TEXT}"),
    }
}
