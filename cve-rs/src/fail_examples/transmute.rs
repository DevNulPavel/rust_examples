//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#[repr(C)]
#[derive(Debug)]
struct Boy {
    age: u32,
    name: String,
    github_username: String,
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#[repr(C)]
#[derive(Debug)]
struct Girl {
    age: u32,
    name: String,
    github_username: String,
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

pub fn transmute_demo() -> std::io::Result<()> {
    use std::io::Write as _;

    let stdin = std::io::stdin();
    let mut stdout = std::io::stdout();
    let mut input_buf = String::new();

    stdout.write_all(b"Creating a Boy struct\n")?;

    let age = {
        stdout.write_all(b"Enter age: ")?;
        stdout.flush()?;

        stdin.read_line(&mut input_buf)?;

        match input_buf.trim().parse() {
            Ok(age) => age,
            Err(_) => panic!("Invalid age"),
        }
    };

    let name = {
        stdout.write_all(b"Enter name: ")?;
        stdout.flush()?;

        input_buf.clear();
        stdin.read_line(&mut input_buf)?;
        input_buf.trim().to_owned()
    };

    let github_username = {
        stdout.write_all(b"Enter github username: ")?;
        stdout.flush()?;

        input_buf.clear();
        stdin.read_line(&mut input_buf)?;
        input_buf.trim().to_owned()
    };

    let boy: Boy = Boy {
        age,
        name,
        github_username,
    };

    println!("Before transmute: {boy:?}");

    let girl: Girl = super::transmute(boy);

    println!("After transmute: {girl:?}");

    Ok(())
}
