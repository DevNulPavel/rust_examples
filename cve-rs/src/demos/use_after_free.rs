//! Совершенно безопасное использование после освобождения.

////////////////////////////////////////////////////////////////////////////////////////

use crate::expansion;
use std::{
    hint::black_box,
    io::{stdin, stdout, Read, Write},
};

////////////////////////////////////////////////////////////////////////////////////////

/// Размер буфера, который мы создаем, а после чего уничтожаем.
const HORRIBLE_LEN: usize = 64;

////////////////////////////////////////////////////////////////////////////////////////

/// Получаем статическую ссылку на дропнутое значение
#[inline(never)]
fn get_horrible_buffer_mut() -> &'static mut [u8; HORRIBLE_LEN] {
    // Получаем массив на стеке без каких-либо оптимизаций компилятора
    let mut buffer = black_box([0; HORRIBLE_LEN]);

    // Для данного массива расширяем время его жизни в статическое
    expansion::expand_mut(&mut buffer)
}

////////////////////////////////////////////////////////////////////////////////////////

#[inline(never)]
fn innocent_prompt() {
    print!("Give text (must be at least {HORRIBLE_LEN} chars) > ");
    stdout().flush().unwrap();
}

////////////////////////////////////////////////////////////////////////////////////////

/// Читаем данные из освобожденного буффера.
/// Добавляем рандомные данные на стек, затем читаем исх снова.
#[inline(never)]
fn innocent_read(initial_buffer_mut: &mut [u8; HORRIBLE_LEN]) {
    // Получаем стандартный поток ввода
    let mut stdin = black_box(stdin());

    // Данные до записи туда
    println!("Buffer before writing:\n{initial_buffer_mut:?}");

    // Создаем уменьшеный в 2 раза буфер на стеке
    let _buffer = black_box([0_u8; HORRIBLE_LEN / 2]);

    // Какое-то там число на стеке
    let _thing = black_box(69727420_u64);

    // Буфер после создниия рандомных данных
    println!("Buffer after creating random data:\n{initial_buffer_mut:?}");

    // Выводим подсказку для ввода текста
    innocent_prompt();

    // Читаем данные в буффер
    // "Nah, I'd win." - Rust compiler
    stdin.read_exact(initial_buffer_mut).unwrap();

    // Выводим буфер
    println!("Buffer after writing user input:\n{initial_buffer_mut:?}");
}

////////////////////////////////////////////////////////////////////////////////////////

/// Получаем ссылку на уничтоженный буффер, затем пытаемся прочитать из него в фунции `innocent_read`
pub(crate) fn use_after_free_demo() {
    // Получаем статическую ссылку на деаллоцированный буффер.
    let initial_buffer_mut = get_horrible_buffer_mut();

    // Пробуем читать
    innocent_read(initial_buffer_mut);
}
