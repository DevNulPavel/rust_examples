use crate::transmute::transmute;
use std::io::Write;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#[repr(C)]
#[derive(Debug)]
struct Boy {
    age: u32,
    name: String,
    github_username: String,
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#[repr(C)]
#[derive(Debug)]
struct Girl {
    age: u32,
    name: String,
    github_username: String,
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

pub(crate) fn transmute_demo() {
    // Получаем поток ввода
    let stdin = std::io::stdin();

    // Получаем поток вывода
    let mut stdout = std::io::stdout();

    // Создаем буффер для строки
    let mut input_buf = String::new();

    // Парсим возраст из потока ввода
    let age: u32 = {
        // Пишем подсказку
        stdout
            .write_all(b"Creating a Boy struct\nEnter age: ")
            .unwrap();
        stdout.flush().unwrap();

        // Читаем поток ввода
        stdin.read_line(&mut input_buf).unwrap();

        // Обрезаем строку, убирая пробелы в самом начале и в конце,
        // после чего - пробуем распарсить в число
        match input_buf.trim().parse() {
            Ok(age) => age,
            Err(_) => panic!("Invalid age"),
        }
    };

    // Получаем имя из потока ввода
    let name: String = {
        // Выводим подсказку сначала
        stdout.write_all(b"Enter name: ").unwrap();
        stdout.flush().unwrap();

        // Подчищаем временный буффер, но оставляем емкость как есть
        input_buf.clear();

        // Теперь снова вычитываем имя из строки ввода
        stdin.read_line(&mut input_buf).unwrap();

        // Обрубаем пробелы в самом начале и в конце, конвертируем в строку
        input_buf.trim().to_owned()
    };

    // Получаем еще одну строку
    let github_username: String = {
        // Пишем строку символов в качестве приглашения
        stdout.write_all(b"Enter github username: ").unwrap();
        stdout.flush().unwrap();

        // Снова подчищаем буфер
        input_buf.clear();

        // Читаем вводимую строку
        stdin.read_line(&mut input_buf).unwrap();

        // Снова обрезаем пробульные символы и создаем новую строку теперь
        input_buf.trim().to_owned()
    };

    // Создаем новую структуру
    let boy: Boy = Boy {
        age,
        name,
        github_username,
    };

    // Выводим содержимое до модификации
    println!("Before transmute: {boy:?}");

    // Пробуем скастить теперь к "девочке"
    let girl: Girl = transmute(boy);

    // Смотрим на результат
    println!("After transmute: {girl:?}");
}
