//! Расширение области статического лайфтайма.
//!
//! Это проклятое колдовство стоящее за всеми теми багами, которые реализованы в данном проекте.
//!
//! # Как это устроено
//!
//! Это беззвучная дыра в компиляторе Rust, позволяющая расширение области лайфтайма.
//!
//! В функции [`expand`] мы используем [`lifetime_translator`] с [`STATIC_UNIT`],
//! который имеет `'static` время жизни, позволяя нам перевести произвольный лайфтайм
//! в любой другой лайфтайм.
//!
//! `rustc` *должен* выяснить, что выведенный лайфтайм не переживет `'static`,
//! так что мы можем не использовать [`lifetime_translator`], однако, это не так.
//!
//! Смотрите на <https://github.com/rust-lang/rust/issues/25860> для мониторинга исправления данного багрепорта.
//!
//! Он открыт уже в течение многих лет.

////////////////////////////////////////////////////////////////////////////////////////

/// Юнит-тип со статическим лайфтаймом.
///
/// Спасибо беззвучной дыре, которая тут вылезает.
/// Она нам позволяет кастить любое значени времени жизни в любое другое.
const STATIC_UNIT: &&() = &&();

////////////////////////////////////////////////////////////////////////////////////////

/* /// Конвертируем лайфтайм `'b` в лайфтайм `'a`, который имеет большее время жизни.
///
/// Данная функция делает следующее:
///
/// - значение ссылки `_val_a` - это `&'a &'b`.
/// Это означает, что `'b` должен пережить `'a`, так что
/// ссылка `'a` никогда не может быть висячей.
/// Если `'a` переживает `'b` тогда она должна
/// ссылается на данные, которые уже уничтожены.
///
/// - Следовательно, `val_b`, которое имеет лайфтайм `'b`, валидно для `'a`.
///
/// Здесь видно, что на вход мы получаем лайфтайм меньше в лайфтайм большей длительности.
#[inline(never)]
const fn lifetime_translator<'a: 'b, 'b, T>(_val_a: &'a &'b (), val_b: &'b T) -> &'a T {
    val_b
} */

////////////////////////////////////////////////////////////////////////////////////////

/// Делает то же самое, что и [`lifetime_translator`], но для мутабельных ссылок.
#[inline(never)]
fn lifetime_translator_mut<'a: 'b, 'b, T>(_val_a: &'a &'b (), val_b: &'b mut T) -> &'a mut T {
    val_b
}

////////////////////////////////////////////////////////////////////////////////////////

/* /// Расширяет меньший лайтайм `'b` в больший `'a: 'b`.
///
/// # Безопасность
///
/// Здесь ее нету
pub(crate) fn expand<'a: 'b, 'b, T>(x: &'a T) -> &'b T {
    let f: fn(_, &'a T) -> &'b T = lifetime_translator;
    f(STATIC_UNIT, x)
} */

////////////////////////////////////////////////////////////////////////////////////////

/// Делает ровно то же самое, что и [`expand`], но для мутабельных ссылок.
///
/// # Безопасность
///
/// Здесь ее нету
pub(crate) fn expand_mut<'a, 'b, T>(x: &'a mut T) -> &'b mut T {
    let f: fn(_, &'a mut T) -> &'b mut T = lifetime_translator_mut;
    f(STATIC_UNIT, x)
}
