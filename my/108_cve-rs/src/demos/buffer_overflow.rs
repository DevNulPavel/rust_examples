//! Вариант с переполнением буффера.
//!
//! Мы аллоцируем буффер на стеке, затем конвертируем его в строку с большей емкостью,
//! После чего мы читаем ввод пользователя в эту самую строку.
//! Это приводит к тому, что мы перезаписываем данные на стеке, которые идут после
//! аллоцированного на стеке буффера.

////////////////////////////////////////////////////////////////////////////////////////

use crate::helpers::construct_fake_string;
use std::{
    hint::black_box,
    io::{stdin, stdout, Write},
    mem, thread,
    time::Duration,
};

////////////////////////////////////////////////////////////////////////////////////////

#[repr(C)]
#[derive(Default)]
struct Authentication {
    name_buf: [u8; 16],
    password: [u8; 16],
}

////////////////////////////////////////////////////////////////////////////////////////

/// Perform a buffer overflow.
/// Выполняем переполнение буффера.
///
/// Выполнено в формате небольшой проверки пароля из терминала.
#[inline(never)]
pub(crate) fn buffer_overflow_demo() {
    // Создаем пустую структуру
    let mut auth = black_box(Authentication::default());

    // Создаем фейковую строку с указателем в виде имени,
    // а так же сильно большой емкостью, но
    // нулевым размером.
    let mut name = construct_fake_string(auth.name_buf.as_mut_ptr(), 1024usize, 0usize);

    // Выводим в терминал приглашение
    print!("Hello! What's your name? > ");
    stdout().flush().unwrap();

    // Читаем строку в этот самый буффер на стеке под видом строки
    stdin().read_line(&mut name).unwrap();

    // Если мы не забудем про эту строку, то раст попытается деаллоцировать эту самую строку
    // а вместе с ней и указатель на стеке.
    // Сейчас нам это совершенно не нужно.
    mem::forget(name);

    // Получаем слайс на данные пароля, которые мы прочитали из строки ввода
    let password = &auth.password[0..8];

    // Если все элементы пароля все еще нулевые, значит мы никак не модифицировали пароль
    if password.iter().all(|&x| x == 0) {
        println!("You didn't even modify the password...");
    }
    // Эмуляция успешности, сверяем сам пароль
    else if &password == b"letmein!" {
        #[cfg(unix)]
        println!("Correct password, running sudo rm -rf /* ...");

        #[cfg(windows)]
        println!("Correct password, deleting C:\\Windows\\System32 ...");

        thread::sleep(Duration::from_secs(2));
    }
    // Не тот пароль
    else {
        println!(
            "Wrong password! You entered: {:?}",
            std::str::from_utf8(password).unwrap()
        );
    }

    // TODO: ???
    black_box(auth);
}
