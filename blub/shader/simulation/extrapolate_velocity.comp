// Extrapolates velocity into air and solid for easy access in particle update

#version 450

#include "bindings_write_volume.glsl"

COMPUTE_PASS_VOLUME

bool isValidVelocity(ivec3 coord, int component) {
    if (texelFetch(MarkerVolume, coord, 0).x == CELL_FLUID)
        return true;
    coord[component] += 1;
    return texelFetch(MarkerVolume, coord, 0).x == CELL_FLUID;
}

// Macro since can't pass images.
#define velocityContribution(velocityVolume, component, gridCoord, offset, numV, avgV)                                                               \
    {                                                                                                                                                \
        ivec3 c = gridCoord + offset;                                                                                                                \
        if (isValidVelocity(c, component)) {                                                                                                         \
            numV += 1;                                                                                                                               \
            avgV += imageLoad(velocityVolume, c).x;                                                                                                  \
        }                                                                                                                                            \
    }

void main() {
    ivec3 gridCoord = ivec3(gl_GlobalInvocationID);

    float cellType = texelFetch(MarkerVolume, gridCoord, 0).x;
    if (cellType == CELL_FLUID) // Velocity in all direction is valid, nothing to do.
        return;

    // For every axis we probe direct and diagonal neighbors in its own plane.
    // The trick here is that we know that a particle already has access to two valid velocity in each axis,
    // around the cell the particle marked with CELL_FLUID

    float cellTypeOppositeSide = texelFetch(MarkerVolume, gridCoord + ivec3(1, 0, 0), 0).x;
    if (cellTypeOppositeSide != CELL_FLUID) // If opposite is fluid, then this already is a valid velocity, so nothing to do.
    {
        float numV = 0.0;
        float avgV = 0.0;
        velocityContribution(VelocityVolumeX, 0, gridCoord, ivec3(0, -1, -1), numV, avgV);
        velocityContribution(VelocityVolumeX, 0, gridCoord, ivec3(0, 0, -1), numV, avgV);
        velocityContribution(VelocityVolumeX, 0, gridCoord, ivec3(0, 1, -1), numV, avgV);
        velocityContribution(VelocityVolumeX, 0, gridCoord, ivec3(0, -1, 0), numV, avgV);
        velocityContribution(VelocityVolumeX, 0, gridCoord, ivec3(0, 1, 0), numV, avgV);
        velocityContribution(VelocityVolumeX, 0, gridCoord, ivec3(0, -1, 1), numV, avgV);
        velocityContribution(VelocityVolumeX, 0, gridCoord, ivec3(0, 0, 1), numV, avgV);
        velocityContribution(VelocityVolumeX, 0, gridCoord, ivec3(0, 1, 1), numV, avgV);
        if (numV > 0) {
            imageStore(VelocityVolumeX, gridCoord, (avgV / numV).xxxx);
        }
    }

    cellTypeOppositeSide = texelFetch(MarkerVolume, gridCoord + ivec3(0, 1, 0), 0).x;
    if (cellTypeOppositeSide != CELL_FLUID) // If opposite is fluid, then this already is a valid velocity, so nothing to do.
    {
        float numV = 0.0;
        float avgV = 0.0;
        velocityContribution(VelocityVolumeY, 1, gridCoord, ivec3(-1, 0, -1), numV, avgV);
        velocityContribution(VelocityVolumeY, 1, gridCoord, ivec3(0, 0, -1), numV, avgV);
        velocityContribution(VelocityVolumeY, 1, gridCoord, ivec3(1, 0, -1), numV, avgV);
        velocityContribution(VelocityVolumeY, 1, gridCoord, ivec3(-1, 0, 0), numV, avgV);
        velocityContribution(VelocityVolumeY, 1, gridCoord, ivec3(1, 0, 0), numV, avgV);
        velocityContribution(VelocityVolumeY, 1, gridCoord, ivec3(-1, 0, 1), numV, avgV);
        velocityContribution(VelocityVolumeY, 1, gridCoord, ivec3(0, 0, 1), numV, avgV);
        velocityContribution(VelocityVolumeY, 1, gridCoord, ivec3(1, 0, 1), numV, avgV);
        if (numV > 0) {
            imageStore(VelocityVolumeY, gridCoord, (avgV / numV).xxxx);
        }
    }

    cellTypeOppositeSide = texelFetch(MarkerVolume, gridCoord + ivec3(0, 0, 1), 0).x;
    if (cellTypeOppositeSide != CELL_FLUID) // If opposite is fluid, then this already is a valid velocity, so nothing to do.
    {
        float numV = 0.0;
        float avgV = 0.0;
        velocityContribution(VelocityVolumeZ, 2, gridCoord, ivec3(-1, -1, 0), numV, avgV);
        velocityContribution(VelocityVolumeZ, 2, gridCoord, ivec3(0, -1, 0), numV, avgV);
        velocityContribution(VelocityVolumeZ, 2, gridCoord, ivec3(1, -1, 0), numV, avgV);
        velocityContribution(VelocityVolumeZ, 2, gridCoord, ivec3(-1, 0, 0), numV, avgV);
        velocityContribution(VelocityVolumeZ, 2, gridCoord, ivec3(1, 0, 0), numV, avgV);
        velocityContribution(VelocityVolumeZ, 2, gridCoord, ivec3(-1, 1, 0), numV, avgV);
        velocityContribution(VelocityVolumeZ, 2, gridCoord, ivec3(0, 1, 0), numV, avgV);
        velocityContribution(VelocityVolumeZ, 2, gridCoord, ivec3(1, 1, 0), numV, avgV);
        if (numV > 0) {
            imageStore(VelocityVolumeZ, gridCoord, (avgV / numV).xxxx);
        }
    }
}