// Applies coefficient matrix A to Search (s) and starts dotproduct (component-wise multiply) searchTimesA with original Search (s)

#version 460

#include "pressure.glsl"

layout(set = 2, binding = 0) buffer restrict _ReduceBuffer { float ReduceBuffer[]; };
layout(set = 2, binding = 1) uniform texture3D Search;

COMPUTE_PASS_PRESSURE

// It seems that there is a bug that will make this function misbehave if it is declared before the thread group layout declaration
uint GetReduceBufferAddress() {
    uint threadsPerWorkgroup = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;
    uint threadGroupIndex = (gl_WorkGroupID.z * gl_NumWorkGroups.y + gl_WorkGroupID.y) * gl_NumWorkGroups.x + gl_WorkGroupID.x;
    return gl_LocalInvocationIndex + threadsPerWorkgroup * threadGroupIndex;
}

void main() {
    ivec3 gridCoord = ivec3(gl_GlobalInvocationID);
    float marker = texelFetch(MarkerVolume, gridCoord, 0).x;

    float dotProductValue = 0.0;
    if (marker == CELL_FLUID) {
        float searchValue = texelFetch(Search, gridCoord, 0).x;
        float searchTimesA = MultiplyWithCoefficientMatrix(gridCoord, Search, searchValue);
        dotProductValue = searchValue * searchTimesA;
    }
    ReduceBuffer[GetReduceBufferAddress()] = dotProductValue;
}
