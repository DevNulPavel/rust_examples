
test compile
target s390x

; FIXME: add immediate operand versions

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BAND
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %band_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = band.i64 v0, v1
  return v2
}

; check:  ngr %r2, %r3
; nextln: br %r14

function %band_i64_mem(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = load.i64 v1
  v3 = band.i64 v0, v2
  return v3
}

; check:  ng %r2, 0(%r3)
; nextln: br %r14

function %band_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = band.i32 v0, v1
  return v2
}

; check:  nr %r2, %r3
; nextln: br %r14

function %band_i32_mem(i32, i64) -> i32 {
block0(v0: i32, v1: i64):
  v2 = load.i32 v1
  v3 = band.i32 v0, v2
  return v3
}

; check:  n %r2, 0(%r3)
; nextln: br %r14

function %band_i32_memoff(i32, i64) -> i32 {
block0(v0: i32, v1: i64):
  v2 = load.i32 v1+4096
  v3 = band.i32 v0, v2
  return v3
}

; check:  ny %r2, 4096(%r3)
; nextln: br %r14

function %band_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = band.i16 v0, v1
  return v2
}

; check:  nr %r2, %r3
; nextln: br %r14

function %band_i16_mem(i16, i64) -> i16 {
block0(v0: i16, v1: i64):
  v2 = load.i16 v1
  v3 = band.i16 v0, v2
  return v3
}

; check:  llh %r3, 0(%r3)
; nextln: nr %r2, %r3
; nextln: br %r14

function %band_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = band.i8 v0, v1
  return v2
}

; check:  nr %r2, %r3
; nextln: br %r14

function %band_i8_mem(i8, i64) -> i8 {
block0(v0: i8, v1: i64):
  v2 = load.i8 v1
  v3 = band.i8 v0, v2
  return v3
}

; check:  llc %r3, 0(%r3)
; nextln: nr %r2, %r3
; nextln: br %r14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BOR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %bor_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = bor.i64 v0, v1
  return v2
}

; check:  ogr %r2, %r3
; nextln: br %r14

function %bor_i64_mem(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = load.i64 v1
  v3 = bor.i64 v0, v2
  return v3
}

; check:  og %r2, 0(%r3)
; nextln: br %r14

function %bor_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = bor.i32 v0, v1
  return v2
}

; check:  or %r2, %r3
; nextln: br %r14

function %bor_i32_mem(i32, i64) -> i32 {
block0(v0: i32, v1: i64):
  v2 = load.i32 v1
  v3 = bor.i32 v0, v2
  return v3
}

; check:  o %r2, 0(%r3)
; nextln: br %r14

function %bor_i32_memoff(i32, i64) -> i32 {
block0(v0: i32, v1: i64):
  v2 = load.i32 v1+4096
  v3 = bor.i32 v0, v2
  return v3
}

; check:  oy %r2, 4096(%r3)
; nextln: br %r14

function %bor_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = bor.i16 v0, v1
  return v2
}

; check:  or %r2, %r3
; nextln: br %r14

function %bor_i16_mem(i16, i64) -> i16 {
block0(v0: i16, v1: i64):
  v2 = load.i16 v1
  v3 = bor.i16 v0, v2
  return v3
}

; check:  llh %r3, 0(%r3)
; nextln: or %r2, %r3
; nextln: br %r14

function %bor_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = bor.i8 v0, v1
  return v2
}

; check:  or %r2, %r3
; nextln: br %r14

function %bor_i8_mem(i8, i64) -> i8 {
block0(v0: i8, v1: i64):
  v2 = load.i8 v1
  v3 = bor.i8 v0, v2
  return v3
}

; check:  llc %r3, 0(%r3)
; nextln: or %r2, %r3
; nextln: br %r14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BXOR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %bxor_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = bxor.i64 v0, v1
  return v2
}

; check:  xgr %r2, %r3
; nextln: br %r14

function %bxor_i64_mem(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = load.i64 v1
  v3 = bxor.i64 v0, v2
  return v3
}

; check:  xg %r2, 0(%r3)
; nextln: br %r14

function %bxor_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = bxor.i32 v0, v1
  return v2
}

; check:  xr %r2, %r3
; nextln: br %r14

function %bxor_i32_mem(i32, i64) -> i32 {
block0(v0: i32, v1: i64):
  v2 = load.i32 v1
  v3 = bxor.i32 v0, v2
  return v3
}

; check:  x %r2, 0(%r3)
; nextln: br %r14

function %bxor_i32_memoff(i32, i64) -> i32 {
block0(v0: i32, v1: i64):
  v2 = load.i32 v1+4096
  v3 = bxor.i32 v0, v2
  return v3
}

; check:  xy %r2, 4096(%r3)
; nextln: br %r14

function %bxor_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = bxor.i16 v0, v1
  return v2
}

; check:  xr %r2, %r3
; nextln: br %r14

function %bxor_i16_mem(i16, i64) -> i16 {
block0(v0: i16, v1: i64):
  v2 = load.i16 v1
  v3 = bxor.i16 v0, v2
  return v3
}

; check:  llh %r3, 0(%r3)
; nextln: xr %r2, %r3
; nextln: br %r14

function %bxor_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = bxor.i8 v0, v1
  return v2
}

; check:  xr %r2, %r3
; nextln: br %r14

function %bxor_i8_mem(i8, i64) -> i8 {
block0(v0: i8, v1: i64):
  v2 = load.i8 v1
  v3 = bxor.i8 v0, v2
  return v3
}

; check:  llc %r3, 0(%r3)
; nextln: xr %r2, %r3
; nextln: br %r14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BAND_NOT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %band_not_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = band_not.i64 v0, v1
  return v2
}

; check:  ngr %r2, %r3
; nextln: xilf %r2, 4294967295
; nextln: xihf %r2, 4294967295
; nextln: br %r14

function %band_not_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = band_not.i32 v0, v1
  return v2
}

; check:  nr %r2, %r3
; nextln: xilf %r2, 4294967295
; nextln: br %r14

function %band_not_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = band_not.i16 v0, v1
  return v2
}

; check:  nr %r2, %r3
; nextln: xilf %r2, 4294967295
; nextln: br %r14

function %band_not_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = band_not.i8 v0, v1
  return v2
}

; check:  nr %r2, %r3
; nextln: xilf %r2, 4294967295
; nextln: br %r14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BOR_NOT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %bor_not_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = bor_not.i64 v0, v1
  return v2
}

; check:  ogr %r2, %r3
; nextln: xilf %r2, 4294967295
; nextln: xihf %r2, 4294967295
; nextln: br %r14

function %bor_not_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = bor_not.i32 v0, v1
  return v2
}

; check:  or %r2, %r3
; nextln: xilf %r2, 4294967295
; nextln: br %r14

function %bor_not_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = bor_not.i16 v0, v1
  return v2
}

; check:  or %r2, %r3
; nextln: xilf %r2, 4294967295
; nextln: br %r14

function %bor_not_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = bor_not.i8 v0, v1
  return v2
}

; check:  or %r2, %r3
; nextln: xilf %r2, 4294967295
; nextln: br %r14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BXOR_NOT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %bxor_not_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = bxor_not.i64 v0, v1
  return v2
}

; check:  xgr %r2, %r3
; nextln: xilf %r2, 4294967295
; nextln: xihf %r2, 4294967295
; nextln: br %r14

function %bxor_not_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = bxor_not.i32 v0, v1
  return v2
}

; check:  xr %r2, %r3
; nextln: xilf %r2, 4294967295
; nextln: br %r14

function %bxor_not_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = bxor_not.i16 v0, v1
  return v2
}

; check:  xr %r2, %r3
; nextln: xilf %r2, 4294967295
; nextln: br %r14

function %bxor_not_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = bxor_not.i8 v0, v1
  return v2
}

; check:  xr %r2, %r3
; nextln: xilf %r2, 4294967295
; nextln: br %r14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BNOT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %bnot_i64(i64) -> i64 {
block0(v0: i64):
  v1 = bnot.i64 v0
  return v1
}

; check:  xilf %r2, 4294967295
; nextln: xihf %r2, 4294967295
; nextln: br %r14

function %bnot_i32(i32) -> i32 {
block0(v0: i32):
  v1 = bnot.i32 v0
  return v1
}

; check:  xilf %r2, 4294967295
; nextln: br %r14

function %bnot_i16(i16) -> i16 {
block0(v0: i16):
  v1 = bnot.i16 v0
  return v1
}

; check:  xilf %r2, 4294967295
; nextln: br %r14

function %bnot_i8(i8) -> i8 {
block0(v0: i8):
  v1 = bnot.i8 v0
  return v1
}

; check:  xilf %r2, 4294967295
; nextln: br %r14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BITSELECT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %bitselect_i64(i64, i64, i64) -> i64 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = bitselect.i64 v0, v1, v2
  return v3
}

; check:  ngr %r3, %r2
; nextln: ngrk %r2, %r4, %r2
; nextln: xilf %r2, 4294967295
; nextln: xihf %r2, 4294967295
; nextln: ogr %r2, %r3
; nextln: br %r14

function %bitselect_i32(i32, i32, i32) -> i32 {
block0(v0: i32, v1: i32, v2: i32):
  v3 = bitselect.i32 v0, v1, v2
  return v3
}

; check:  nr %r3, %r2
; nextln: nrk %r2, %r4, %r2
; nextln: xilf %r2, 4294967295
; nextln: or %r2, %r3
; nextln: br %r14

function %bitselect_i16(i16, i16, i16) -> i16 {
block0(v0: i16, v1: i16, v2: i16):
  v3 = bitselect.i16 v0, v1, v2
  return v3
}

; check:  nr %r3, %r2
; nextln: nrk %r2, %r4, %r2
; nextln: xilf %r2, 4294967295
; nextln: or %r2, %r3
; nextln: br %r14

function %bitselect_i8(i8, i8, i8) -> i8 {
block0(v0: i8, v1: i8, v2: i8):
  v3 = bitselect.i8 v0, v1, v2
  return v3
}

; check:  nr %r3, %r2
; nextln: nrk %r2, %r4, %r2
; nextln: xilf %r2, 4294967295
; nextln: or %r2, %r3
; nextln: br %r14

