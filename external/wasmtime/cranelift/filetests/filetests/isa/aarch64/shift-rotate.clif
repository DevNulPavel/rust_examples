test compile precise-output
set unwind_info=false
target aarch64

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ROR, variable
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %i128_rotr(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
  v2 = rotr.i128 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 25)
;   Inst 0:   mov x4, x1
;   Inst 1:   orr x1, xzr, #128
;   Inst 2:   sub x1, x1, x2
;   Inst 3:   lsr x5, x0, x2
;   Inst 4:   lsr x3, x4, x2
;   Inst 5:   orn w6, wzr, w2
;   Inst 6:   lsl x7, x4, #1
;   Inst 7:   lsl x6, x7, x6
;   Inst 8:   orr x5, x5, x6
;   Inst 9:   ands xzr, x2, #64
;   Inst 10:   csel x2, x3, x5, ne
;   Inst 11:   csel x3, xzr, x3, ne
;   Inst 12:   lsl x5, x0, x1
;   Inst 13:   lsl x4, x4, x1
;   Inst 14:   orn w6, wzr, w1
;   Inst 15:   lsr x0, x0, #1
;   Inst 16:   lsr x0, x0, x6
;   Inst 17:   orr x0, x4, x0
;   Inst 18:   ands xzr, x1, #64
;   Inst 19:   csel x1, xzr, x5, ne
;   Inst 20:   csel x0, x5, x0, ne
;   Inst 21:   orr x3, x3, x0
;   Inst 22:   orr x0, x2, x1
;   Inst 23:   mov x1, x3
;   Inst 24:   ret
; }}

function %f0(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = rotr.i64 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   ror x0, x0, x1
;   Inst 1:   ret
; }}

function %f1(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = rotr.i32 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   ror w0, w0, w1
;   Inst 1:   ret
; }}

function %f2(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = rotr.i16 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 8)
;   Inst 0:   uxth w0, w0
;   Inst 1:   and w1, w1, #15
;   Inst 2:   sub w2, w1, #16
;   Inst 3:   sub w2, wzr, w2
;   Inst 4:   lsr w1, w0, w1
;   Inst 5:   lsl w0, w0, w2
;   Inst 6:   orr w0, w0, w1
;   Inst 7:   ret
; }}

function %f3(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = rotr.i8 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 8)
;   Inst 0:   uxtb w0, w0
;   Inst 1:   and w1, w1, #7
;   Inst 2:   sub w2, w1, #8
;   Inst 3:   sub w2, wzr, w2
;   Inst 4:   lsr w1, w0, w1
;   Inst 5:   lsl w0, w0, w2
;   Inst 6:   orr w0, w0, w1
;   Inst 7:   ret
; }}

function %i128_rotl(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
  v2 = rotl.i128 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 24)
;   Inst 0:   mov x4, x0
;   Inst 1:   orr x0, xzr, #128
;   Inst 2:   sub x0, x0, x2
;   Inst 3:   lsl x3, x4, x2
;   Inst 4:   lsl x5, x1, x2
;   Inst 5:   orn w6, wzr, w2
;   Inst 6:   lsr x7, x4, #1
;   Inst 7:   lsr x6, x7, x6
;   Inst 8:   orr x5, x5, x6
;   Inst 9:   ands xzr, x2, #64
;   Inst 10:   csel x2, xzr, x3, ne
;   Inst 11:   csel x3, x3, x5, ne
;   Inst 12:   lsr x5, x4, x0
;   Inst 13:   lsr x4, x1, x0
;   Inst 14:   orn w6, wzr, w0
;   Inst 15:   lsl x1, x1, #1
;   Inst 16:   lsl x1, x1, x6
;   Inst 17:   orr x1, x5, x1
;   Inst 18:   ands xzr, x0, #64
;   Inst 19:   csel x0, x4, x1, ne
;   Inst 20:   csel x1, xzr, x4, ne
;   Inst 21:   orr x0, x2, x0
;   Inst 22:   orr x1, x3, x1
;   Inst 23:   ret
; }}

function %f4(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = rotl.i64 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 3)
;   Inst 0:   sub x1, xzr, x1
;   Inst 1:   ror x0, x0, x1
;   Inst 2:   ret
; }}

function %f5(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = rotl.i32 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 3)
;   Inst 0:   sub w1, wzr, w1
;   Inst 1:   ror w0, w0, w1
;   Inst 2:   ret
; }}

function %f6(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = rotl.i16 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 9)
;   Inst 0:   sub w1, wzr, w1
;   Inst 1:   uxth w0, w0
;   Inst 2:   and w1, w1, #15
;   Inst 3:   sub w2, w1, #16
;   Inst 4:   sub w2, wzr, w2
;   Inst 5:   lsr w1, w0, w1
;   Inst 6:   lsl w0, w0, w2
;   Inst 7:   orr w0, w0, w1
;   Inst 8:   ret
; }}

function %f7(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = rotl.i8 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 9)
;   Inst 0:   sub w1, wzr, w1
;   Inst 1:   uxtb w0, w0
;   Inst 2:   and w1, w1, #7
;   Inst 3:   sub w2, w1, #8
;   Inst 4:   sub w2, wzr, w2
;   Inst 5:   lsr w1, w0, w1
;   Inst 6:   lsl w0, w0, w2
;   Inst 7:   orr w0, w0, w1
;   Inst 8:   ret
; }}

function %f8(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = ushr.i64 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   lsr x0, x0, x1
;   Inst 1:   ret
; }}

function %f9(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = ushr.i32 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   lsr w0, w0, w1
;   Inst 1:   ret
; }}

function %f10(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = ushr.i16 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 4)
;   Inst 0:   uxth w0, w0
;   Inst 1:   and w1, w1, #15
;   Inst 2:   lsr w0, w0, w1
;   Inst 3:   ret
; }}

function %f11(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = ushr.i8 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 4)
;   Inst 0:   uxtb w0, w0
;   Inst 1:   and w1, w1, #7
;   Inst 2:   lsr w0, w0, w1
;   Inst 3:   ret
; }}

function %f12(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = ishl.i64 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   lsl x0, x0, x1
;   Inst 1:   ret
; }}

function %f13(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = ishl.i32 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   lsl w0, w0, w1
;   Inst 1:   ret
; }}

function %f14(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = ishl.i16 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 3)
;   Inst 0:   and w1, w1, #15
;   Inst 1:   lsl w0, w0, w1
;   Inst 2:   ret
; }}

function %f15(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = ishl.i8 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 3)
;   Inst 0:   and w1, w1, #7
;   Inst 1:   lsl w0, w0, w1
;   Inst 2:   ret
; }}

function %f16(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = sshr.i64 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   asr x0, x0, x1
;   Inst 1:   ret
; }}

function %f17(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = sshr.i32 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   asr w0, w0, w1
;   Inst 1:   ret
; }}

function %f18(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = sshr.i16 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 4)
;   Inst 0:   sxth w0, w0
;   Inst 1:   and w1, w1, #15
;   Inst 2:   asr w0, w0, w1
;   Inst 3:   ret
; }}

function %f19(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = sshr.i8 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 4)
;   Inst 0:   sxtb w0, w0
;   Inst 1:   and w1, w1, #7
;   Inst 2:   asr w0, w0, w1
;   Inst 3:   ret
; }}

function %f20(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i32 17
  v2 = rotr.i64 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   ror x0, x0, #17
;   Inst 1:   ret
; }}

function %f21(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i32 17
  v2 = rotl.i64 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   ror x0, x0, #47
;   Inst 1:   ret
; }}

function %f22(i32) -> i32 {
block0(v0: i32):
  v1 = iconst.i32 17
  v2 = rotl.i32 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   ror w0, w0, #15
;   Inst 1:   ret
; }}

function %f23(i16) -> i16 {
block0(v0: i16):
  v1 = iconst.i32 10
  v2 = rotl.i16 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 5)
;   Inst 0:   uxth w0, w0
;   Inst 1:   lsr w1, w0, #6
;   Inst 2:   lsl w0, w0, #10
;   Inst 3:   orr w0, w0, w1
;   Inst 4:   ret
; }}

function %f24(i8) -> i8 {
block0(v0: i8):
  v1 = iconst.i32 3
  v2 = rotl.i8 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 5)
;   Inst 0:   uxtb w0, w0
;   Inst 1:   lsr w1, w0, #5
;   Inst 2:   lsl w0, w0, #3
;   Inst 3:   orr w0, w0, w1
;   Inst 4:   ret
; }}

function %f25(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i32 17
  v2 = ushr.i64 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   lsr x0, x0, #17
;   Inst 1:   ret
; }}

function %f26(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i32 17
  v2 = sshr.i64 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   asr x0, x0, #17
;   Inst 1:   ret
; }}

function %f27(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i32 17
  v2 = ishl.i64 v0, v1
  return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   lsl x0, x0, #17
;   Inst 1:   ret
; }}

