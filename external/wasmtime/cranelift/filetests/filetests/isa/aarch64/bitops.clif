test compile precise-output
set unwind_info=false
target aarch64

function %a(i8) -> i8 {
block0(v0: i8):
    v1 = bitrev v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 3)
;   Inst 0:   rbit w0, w0
;   Inst 1:   lsr w0, w0, #24
;   Inst 2:   ret
; }}

function %a(i16) -> i16 {
block0(v0: i16):
    v1 = bitrev v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 3)
;   Inst 0:   rbit w0, w0
;   Inst 1:   lsr w0, w0, #16
;   Inst 2:   ret
; }}

function %a(i32) -> i32 {
block0(v0: i32):
    v1 = bitrev v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   rbit w0, w0
;   Inst 1:   ret
; }}

function %a(i64) -> i64 {
block0(v0: i64):
    v1 = bitrev v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   rbit x0, x0
;   Inst 1:   ret
; }}

function %a(i128) -> i128 {
block0(v0: i128):
    v1 = bitrev v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 4)
;   Inst 0:   rbit x2, x0
;   Inst 1:   rbit x0, x1
;   Inst 2:   mov x1, x2
;   Inst 3:   ret
; }}

function %b(i8) -> i8 {
block0(v0: i8):
    v1 = clz v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 4)
;   Inst 0:   uxtb w0, w0
;   Inst 1:   clz w0, w0
;   Inst 2:   sub w0, w0, #24
;   Inst 3:   ret
; }}

function %b(i16) -> i16 {
block0(v0: i16):
    v1 = clz v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 4)
;   Inst 0:   uxth w0, w0
;   Inst 1:   clz w0, w0
;   Inst 2:   sub w0, w0, #16
;   Inst 3:   ret
; }}

function %b(i32) -> i32 {
block0(v0: i32):
    v1 = clz v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   clz w0, w0
;   Inst 1:   ret
; }}

function %b(i64) -> i64 {
block0(v0: i64):
    v1 = clz v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   clz x0, x0
;   Inst 1:   ret
; }}

function %b(i128) -> i128 {
block0(v0: i128):
    v1 = clz v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 6)
;   Inst 0:   clz x1, x1
;   Inst 1:   clz x0, x0
;   Inst 2:   lsr x2, x1, #6
;   Inst 3:   madd x0, x0, x2, x1
;   Inst 4:   movz x1, #0
;   Inst 5:   ret
; }}

function %c(i8) -> i8 {
block0(v0: i8):
    v1 = cls v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 4)
;   Inst 0:   uxtb w0, w0
;   Inst 1:   cls w0, w0
;   Inst 2:   sub w0, w0, #24
;   Inst 3:   ret
; }}

function %c(i16) -> i16 {
block0(v0: i16):
    v1 = cls v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 4)
;   Inst 0:   uxth w0, w0
;   Inst 1:   cls w0, w0
;   Inst 2:   sub w0, w0, #16
;   Inst 3:   ret
; }}

function %c(i32) -> i32 {
block0(v0: i32):
    v1 = cls v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   cls w0, w0
;   Inst 1:   ret
; }}

function %c(i64) -> i64 {
block0(v0: i64):
    v1 = cls v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   cls x0, x0
;   Inst 1:   ret
; }}

function %c(i128) -> i128 {
block0(v0: i128):
    v1 = cls v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 10)
;   Inst 0:   cls x2, x0
;   Inst 1:   cls x3, x1
;   Inst 2:   eon x0, x1, x0
;   Inst 3:   lsr x0, x0, #63
;   Inst 4:   madd x0, x2, x0, x0
;   Inst 5:   subs xzr, x3, #63
;   Inst 6:   csel x0, x0, xzr, eq
;   Inst 7:   add x0, x0, x3
;   Inst 8:   movz x1, #0
;   Inst 9:   ret
; }}

function %d(i8) -> i8 {
block0(v0: i8):
    v1 = ctz v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 4)
;   Inst 0:   rbit w0, w0
;   Inst 1:   orr w0, w0, #8388608
;   Inst 2:   clz w0, w0
;   Inst 3:   ret
; }}

function %d(i16) -> i16 {
block0(v0: i16):
    v1 = ctz v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 4)
;   Inst 0:   rbit w0, w0
;   Inst 1:   orr w0, w0, #32768
;   Inst 2:   clz w0, w0
;   Inst 3:   ret
; }}

function %d(i32) -> i32 {
block0(v0: i32):
    v1 = ctz v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 3)
;   Inst 0:   rbit w0, w0
;   Inst 1:   clz w0, w0
;   Inst 2:   ret
; }}

function %d(i64) -> i64 {
block0(v0: i64):
    v1 = ctz v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 3)
;   Inst 0:   rbit x0, x0
;   Inst 1:   clz x0, x0
;   Inst 2:   ret
; }}

function %d(i128) -> i128 {
block0(v0: i128):
    v1 = ctz v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 8)
;   Inst 0:   rbit x0, x0
;   Inst 1:   rbit x1, x1
;   Inst 2:   clz x0, x0
;   Inst 3:   clz x1, x1
;   Inst 4:   lsr x2, x0, #6
;   Inst 5:   madd x0, x1, x2, x0
;   Inst 6:   movz x1, #0
;   Inst 7:   ret
; }}

function %d(i128) -> i128 {
block0(v0: i128):
    v1 = popcnt v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 7)
;   Inst 0:   fmov d0, x0
;   Inst 1:   mov v0.d[1], x1
;   Inst 2:   cnt v0.16b, v0.16b
;   Inst 3:   addv b0, v0.16b
;   Inst 4:   umov w0, v0.b[0]
;   Inst 5:   movz x1, #0
;   Inst 6:   ret
; }}

function %d(i64) -> i64 {
block0(v0: i64):
    v1 = popcnt v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 5)
;   Inst 0:   fmov d0, x0
;   Inst 1:   cnt v0.8b, v0.8b
;   Inst 2:   addv b0, v0.8b
;   Inst 3:   umov w0, v0.b[0]
;   Inst 4:   ret
; }}

function %d(i32) -> i32 {
block0(v0: i32):
    v1 = popcnt v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 5)
;   Inst 0:   fmov s0, w0
;   Inst 1:   cnt v0.8b, v0.8b
;   Inst 2:   addv b0, v0.8b
;   Inst 3:   umov w0, v0.b[0]
;   Inst 4:   ret
; }}

function %d(i16) -> i16 {
block0(v0: i16):
    v1 = popcnt v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 5)
;   Inst 0:   fmov s0, w0
;   Inst 1:   cnt v0.8b, v0.8b
;   Inst 2:   addp v0.8b, v0.8b, v0.8b
;   Inst 3:   umov w0, v0.b[0]
;   Inst 4:   ret
; }}

function %d(i8) -> i8 {
block0(v0: i8):
    v1 = popcnt v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 4)
;   Inst 0:   fmov s0, w0
;   Inst 1:   cnt v0.8b, v0.8b
;   Inst 2:   umov w0, v0.b[0]
;   Inst 3:   ret
; }}

function %bextend_b8() -> b32 {
block0:
    v1 = bconst.b8 true
    v2 = bextend.b32 v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 3)
;   Inst 0:   movz x0, #255
;   Inst 1:   sxtb w0, w0
;   Inst 2:   ret
; }}

function %bextend_b1() -> b32 {
block0:
    v1 = bconst.b1 true
    v2 = bextend.b32 v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 3)
;   Inst 0:   movz x0, #1
;   Inst 1:   sbfx w0, w0, #0, #1
;   Inst 2:   ret
; }}

function %bnot_i32(i32) -> i32 {
block0(v0: i32):
    v1 = bnot v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   orn w0, wzr, w0
;   Inst 1:   ret
; }}

function %bnot_i64(i64) -> i64 {
block0(v0: i64):
    v1 = bnot v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   orn x0, xzr, x0
;   Inst 1:   ret
; }}

function %bnot_i64_with_shift(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 3
    v2 = ishl.i64 v0, v1
    v3 = bnot v2
    return v3
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   orn x0, xzr, x0, LSL 3
;   Inst 1:   ret
; }}

function %bnot_i128(i128) -> i128 {
block0(v0: i128):
    v1 = bnot v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 3)
;   Inst 0:   orn x0, xzr, x0
;   Inst 1:   orn x1, xzr, x1
;   Inst 2:   ret
; }}

function %bnot_i8x16(i8x16) -> i8x16 {
block0(v0: i8x16):
    v1 = bnot v0
    return v1
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   mvn v0.16b, v0.16b
;   Inst 1:   ret
; }}

function %band_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = band v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   and w0, w0, w1
;   Inst 1:   ret
; }}

function %band_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = band v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   and x0, x0, x1
;   Inst 1:   ret
; }}

function %band_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = band v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 3)
;   Inst 0:   and x0, x0, x2
;   Inst 1:   and x1, x1, x3
;   Inst 2:   ret
; }}

function %band_i8x16(i8x16, i8x16) -> i8x16 {
block0(v0: i8x16, v1: i8x16):
    v2 = band v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   and v0.16b, v0.16b, v1.16b
;   Inst 1:   ret
; }}

function %band_i64_constant(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 3
    v2 = band v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   and x0, x0, #3
;   Inst 1:   ret
; }}

function %band_i64_constant2(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 3
    v2 = band v1, v0
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   and x0, x0, #3
;   Inst 1:   ret
; }}

function %band_i64_constant_shift(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 3
    v3 = ishl.i64 v1, v2
    v4 = band v0, v3
    return v4
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   and x0, x0, x1, LSL 3
;   Inst 1:   ret
; }}

function %band_i64_constant_shift2(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 3
    v3 = ishl.i64 v1, v2
    v4 = band v3, v0
    return v4
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   and x0, x0, x1, LSL 3
;   Inst 1:   ret
; }}

function %bor_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = bor v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   orr w0, w0, w1
;   Inst 1:   ret
; }}

function %bor_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = bor v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   orr x0, x0, x1
;   Inst 1:   ret
; }}

function %bor_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = bor v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 3)
;   Inst 0:   orr x0, x0, x2
;   Inst 1:   orr x1, x1, x3
;   Inst 2:   ret
; }}

function %bor_i8x16(i8x16, i8x16) -> i8x16 {
block0(v0: i8x16, v1: i8x16):
    v2 = bor v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   orr v0.16b, v0.16b, v1.16b
;   Inst 1:   ret
; }}

function %bor_i64_constant(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 3
    v2 = bor v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   orr x0, x0, #3
;   Inst 1:   ret
; }}

function %bor_i64_constant2(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 3
    v2 = bor v1, v0
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   orr x0, x0, #3
;   Inst 1:   ret
; }}

function %bor_i64_constant_shift(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 3
    v3 = ishl.i64 v1, v2
    v4 = bor v0, v3
    return v4
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   orr x0, x0, x1, LSL 3
;   Inst 1:   ret
; }}

function %bor_i64_constant_shift2(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 3
    v3 = ishl.i64 v1, v2
    v4 = bor v3, v0
    return v4
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   orr x0, x0, x1, LSL 3
;   Inst 1:   ret
; }}

function %bxor_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = bxor v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   eor w0, w0, w1
;   Inst 1:   ret
; }}

function %bxor_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = bxor v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   eor x0, x0, x1
;   Inst 1:   ret
; }}

function %bxor_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = bxor v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 3)
;   Inst 0:   eor x0, x0, x2
;   Inst 1:   eor x1, x1, x3
;   Inst 2:   ret
; }}

function %bxor_i8x16(i8x16, i8x16) -> i8x16 {
block0(v0: i8x16, v1: i8x16):
    v2 = bxor v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   eor v0.16b, v0.16b, v1.16b
;   Inst 1:   ret
; }}

function %bxor_i64_constant(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 3
    v2 = bxor v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   eor x0, x0, #3
;   Inst 1:   ret
; }}

function %bxor_i64_constant2(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 3
    v2 = bxor v1, v0
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   eor x0, x0, #3
;   Inst 1:   ret
; }}

function %bxor_i64_constant_shift(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 3
    v3 = ishl.i64 v1, v2
    v4 = bxor v0, v3
    return v4
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   eor x0, x0, x1, LSL 3
;   Inst 1:   ret
; }}

function %bxor_i64_constant_shift2(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 3
    v3 = ishl.i64 v1, v2
    v4 = bxor v3, v0
    return v4
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   eor x0, x0, x1, LSL 3
;   Inst 1:   ret
; }}

function %band_not_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = band_not v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   bic w0, w0, w1
;   Inst 1:   ret
; }}

function %band_not_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = band_not v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   bic x0, x0, x1
;   Inst 1:   ret
; }}

function %band_not_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = band_not v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 3)
;   Inst 0:   bic x0, x0, x2
;   Inst 1:   bic x1, x1, x3
;   Inst 2:   ret
; }}

function %band_not_i8x16(i8x16, i8x16) -> i8x16 {
block0(v0: i8x16, v1: i8x16):
    v2 = band_not v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   bic v0.16b, v0.16b, v1.16b
;   Inst 1:   ret
; }}

function %band_not_i64_constant(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 4
    v2 = band_not v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   bic x0, x0, #4
;   Inst 1:   ret
; }}

function %band_not_i64_constant_shift(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 4
    v3 = ishl.i64 v1, v2
    v4 = band_not v0, v3
    return v4
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   bic x0, x0, x1, LSL 4
;   Inst 1:   ret
; }}

function %bor_not_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = bor_not v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   orn w0, w0, w1
;   Inst 1:   ret
; }}

function %bor_not_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = bor_not v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   orn x0, x0, x1
;   Inst 1:   ret
; }}

function %bor_not_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = bor_not v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 3)
;   Inst 0:   orn x0, x0, x2
;   Inst 1:   orn x1, x1, x3
;   Inst 2:   ret
; }}

function %bor_not_i64_constant(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 4
    v2 = bor_not v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   orn x0, x0, #4
;   Inst 1:   ret
; }}

function %bor_not_i64_constant_shift(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 4
    v3 = ishl.i64 v1, v2
    v4 = bor_not v0, v3
    return v4
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   orn x0, x0, x1, LSL 4
;   Inst 1:   ret
; }}

function %bxor_not_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = bxor_not v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   eon w0, w0, w1
;   Inst 1:   ret
; }}

function %bxor_not_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = bxor_not v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   eon x0, x0, x1
;   Inst 1:   ret
; }}

function %bxor_not_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = bxor_not v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 3)
;   Inst 0:   eon x0, x0, x2
;   Inst 1:   eon x1, x1, x3
;   Inst 2:   ret
; }}

function %bxor_not_i64_constant(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 4
    v2 = bxor_not v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   eon x0, x0, #4
;   Inst 1:   ret
; }}

function %bxor_not_i64_constant_shift(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 4
    v3 = ishl.i64 v1, v2
    v4 = bxor_not v0, v3
    return v4
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 2)
;   Inst 0:   eon x0, x0, x1, LSL 4
;   Inst 1:   ret
; }}

function %ishl_i128_i8(i128, i8) -> i128 {
block0(v0: i128, v1: i8):
    v2 = ishl.i128 v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 13)
;   Inst 0:   lsl x4, x0, x2
;   Inst 1:   lsl x3, x1, x2
;   Inst 2:   orn w1, wzr, w2
;   Inst 3:   lsr x0, x0, #1
;   Inst 4:   lsr x0, x0, x1
;   Inst 5:   orr x0, x3, x0
;   Inst 6:   ands xzr, x2, #64
;   Inst 7:   csel x1, xzr, x4, ne
;   Inst 8:   csel x0, x4, x0, ne
;   Inst 9:   mov x2, x0
;   Inst 10:   mov x0, x1
;   Inst 11:   mov x1, x2
;   Inst 12:   ret
; }}

function %ishl_i128_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = ishl.i128 v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 13)
;   Inst 0:   lsl x3, x0, x2
;   Inst 1:   lsl x1, x1, x2
;   Inst 2:   orn w4, wzr, w2
;   Inst 3:   lsr x0, x0, #1
;   Inst 4:   lsr x0, x0, x4
;   Inst 5:   orr x0, x1, x0
;   Inst 6:   ands xzr, x2, #64
;   Inst 7:   csel x1, xzr, x3, ne
;   Inst 8:   csel x0, x3, x0, ne
;   Inst 9:   mov x2, x0
;   Inst 10:   mov x0, x1
;   Inst 11:   mov x1, x2
;   Inst 12:   ret
; }}

function %ushr_i128_i8(i128, i8) -> i128 {
block0(v0: i128, v1: i8):
    v2 = ushr.i128 v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 13)
;   Inst 0:   lsr x3, x0, x2
;   Inst 1:   lsr x0, x1, x2
;   Inst 2:   orn w4, wzr, w2
;   Inst 3:   lsl x1, x1, #1
;   Inst 4:   lsl x1, x1, x4
;   Inst 5:   orr x1, x3, x1
;   Inst 6:   ands xzr, x2, #64
;   Inst 7:   csel x1, x0, x1, ne
;   Inst 8:   csel x0, xzr, x0, ne
;   Inst 9:   mov x2, x0
;   Inst 10:   mov x0, x1
;   Inst 11:   mov x1, x2
;   Inst 12:   ret
; }}

function %ushr_i128_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = ushr.i128 v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 13)
;   Inst 0:   lsr x3, x0, x2
;   Inst 1:   lsr x0, x1, x2
;   Inst 2:   orn w4, wzr, w2
;   Inst 3:   lsl x1, x1, #1
;   Inst 4:   lsl x1, x1, x4
;   Inst 5:   orr x1, x3, x1
;   Inst 6:   ands xzr, x2, #64
;   Inst 7:   csel x1, x0, x1, ne
;   Inst 8:   csel x0, xzr, x0, ne
;   Inst 9:   mov x2, x0
;   Inst 10:   mov x0, x1
;   Inst 11:   mov x1, x2
;   Inst 12:   ret
; }}

function %sshr_i128_i8(i128, i8) -> i128 {
block0(v0: i128, v1: i8):
    v2 = sshr.i128 v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 13)
;   Inst 0:   lsr x3, x0, x2
;   Inst 1:   asr x0, x1, x2
;   Inst 2:   orn w4, wzr, w2
;   Inst 3:   lsl x5, x1, #1
;   Inst 4:   lsl x4, x5, x4
;   Inst 5:   asr x1, x1, #63
;   Inst 6:   orr x3, x3, x4
;   Inst 7:   ands xzr, x2, #64
;   Inst 8:   csel x2, x0, x3, ne
;   Inst 9:   csel x0, x1, x0, ne
;   Inst 10:   mov x1, x0
;   Inst 11:   mov x0, x2
;   Inst 12:   ret
; }}

function %sshr_i128_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = sshr.i128 v0, v1
    return v2
}

; VCode_ShowWithRRU {{
;   Entry block: 0
; Block 0:
;   (original IR block: block0)
;   (instruction range: 0 .. 13)
;   Inst 0:   lsr x3, x0, x2
;   Inst 1:   asr x0, x1, x2
;   Inst 2:   orn w4, wzr, w2
;   Inst 3:   lsl x5, x1, #1
;   Inst 4:   lsl x4, x5, x4
;   Inst 5:   asr x1, x1, #63
;   Inst 6:   orr x3, x3, x4
;   Inst 7:   ands xzr, x2, #64
;   Inst 8:   csel x2, x0, x3, ne
;   Inst 9:   csel x0, x1, x0, ne
;   Inst 10:   mov x1, x0
;   Inst 11:   mov x0, x2
;   Inst 12:   ret
; }}

