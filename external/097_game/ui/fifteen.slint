struct Piece  {
    // –ø–æ–∑–∏—Ü–∏—è —Å—Ç–æ–ª–±—Ü–∞/—Å—Ç—Ä–æ–∫–∏ —Ñ–∏—à–∫–∏ –≤ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–µ
    pos-x: int,
    pos-y: int,
    // —Å–º–µ—â–µ–Ω–∏–µ –≤ –ø–∏–∫—Å–µ–ª—è—Ö –æ—Ç –±–∞–∑–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏—è
    offset-x: length,
    offset-y: length,
}

struct Theme  {
    window-background-color: brush,
    game-background-color: brush,
    game-border: length,
    game-radius: length,
    game-text-color: color,
    game-highlight-color: color,
    piece-border: length,
    piece-background-1: brush,
    piece-background-2: brush,
    piece-border-color-1: brush,
    piece-border-color-2: brush,
    piece-text-color-1: color,
    piece-text-color-2: color,
    piece-text-weight-incorrect-pos: int,
    piece-text-weight-correct-pos: int,
    piece-text-font-family: string,
    piece-radius: length,
    /// Ratio of the piece size
    piece-spacing: float,
}

export component Puzzle15Window inherits Window {
    in property <[Piece]> pieces: [
        { pos-x: 0, pos-y: 0 }, { pos-x: 0, pos-y: 1 }, { pos-x: 0, pos-y: 2 }, { pos-x: 0, pos-y: 3 },
        { pos-x: 1, pos-y: 0 }, { pos-x: 1, pos-y: 1 }, { pos-x: 1, pos-y: 2 }, { pos-x: 1, pos-y: 3 },
        { pos-x: 2, pos-y: 0 }, { pos-x: 2, pos-y: 1 }, { pos-x: 2, pos-y: 2 }, { pos-x: 2, pos-y: 3 },
        { pos-x: 3, pos-y: 0 }, { pos-x: 3, pos-y: 1 }, { pos-x: 3, pos-y: 2 }, { pos-x: 3, pos-y: 3 }];
    in-out property <int> moves;
    in-out property <int> tiles-left;

    callback piece-clicked(int);
    callback reset();
    callback win();

    private property <[Theme]> themes: [
        {
            window-background-color: #ffffff,
            game-background-color: #ffffff,
            game-border: 4px,
            game-radius: 7px,
            game-text-color: #858585,
            game-highlight-color: #1d6aaa,
            piece-border: 1px,
            piece-background-1: #0d579b,
            piece-background-2: #0d579b,
            piece-border-color-1: #0a457b,
            piece-border-color-2: #0a457b,
            piece-text-color-1: #ffffff,
            piece-text-color-2: #ffffff,
            piece-text-weight-incorrect-pos: 400,
            piece-text-weight-correct-pos: 800,
            piece-radius: 5px,
            piece-spacing: 10%,
        },
    ];
    private property <Theme> current-theme: root.themes[0];
    private property <length> pieces-size: min(root.width, root.height) / 6;
    private property <length> pieces-spacing: root.tiles-left == 0 ?
        2px : (root.pieces-size * root.current-theme.piece-spacing);

    title: "–ü—è—Ç–Ω–∞—à–∫–∏";

    animate pieces-spacing { duration: 500ms; easing: ease-out; }

    Rectangle {
        background: root.current-theme.window-background-color;
        animate background { duration: 500ms; easing: ease-out; }
    }

    // –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
    Rectangle {
        border-color: root.current-theme.game-text-color;
        border-width: root.current-theme.game-border;
        border-radius: root.current-theme.game-radius;
        width: root.pieces-size * 4.5;
        height: root.pieces-size * 4.5;
        x: (parent.width - self.width)/2;
        y: (parent.height - self.height)/2;
        animate background, border-color, border-width, border-radius { duration: 500ms; easing: ease-out; }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏—à–∫–∏
        for p[i] in root.pieces : Rectangle {
            property <float> px: p.pos-x;
            property <float> py: p.pos-y;
            property <bool> is-correct: i == p.pos-x * 4 + p.pos-y;

            x: self.py * (root.pieces-size + root.pieces-spacing) + p.offset-x
                + (parent.width - (4*root.pieces-size + 3*root.pieces-spacing))/2;
            y: self.px * (root.pieces-size + root.pieces-spacing) + p.offset-y
                + (parent.height - (4*root.pieces-size + 3*root.pieces-spacing))/2;
            width: root.pieces-size;
            height: root.pieces-size;
            drop-shadow-offset-x: 1px;
            drop-shadow-offset-y: 1px;
            drop-shadow-blur: 3px;
            drop-shadow-color: #00000040;
            border-radius: root.current-theme.piece-radius;
            clip: true;

            states [
                pressed when touch.pressed : {
                    shadow.color: #0002;
                    circle.width: shadow.width * 2 * 1.4142;
                    in  {
                        animate shadow.color { duration: 50ms; }
                        animate circle.width { duration: 2s; easing: ease-out; }
                    }
                    out  {
                        animate shadow.color { duration: 50ms; }
                    }
                }
                hover when touch.has-hover: {
                    shadow.color: #0000000d;
                }
            ]

            animate px , py { duration: 170ms; easing: cubic-bezier(0.17,0.76,0.4,1.75); }

            // –†–∞–º–∫–∞ —Ñ–∏—à–∫–∏
            Rectangle {
                background: i >= 8 ? root.current-theme.piece-background-2 : root.current-theme.piece-background-1;
                border-color: i >= 8 ? root.current-theme.piece-border-color-2 : root.current-theme.piece-border-color-1;
                border-width: root.current-theme.piece-border;
                border-radius: root.current-theme.piece-radius;

                animate border-width, border-radius { duration: 500ms; easing: ease-out; }
            }

            Text {
                text: i+1;
                color: (i >= 8 || is-correct) ? root.current-theme.piece-text-color-2 : root.current-theme.piece-text-color-1;
                font-size: root.pieces-size / 3;
                font-weight: is-correct ? root.current-theme.piece-text-weight-correct-pos : root.current-theme.piece-text-weight-incorrect-pos;
                font-family: root.current-theme.piece-text-font-family;
                vertical-alignment: center;
                horizontal-alignment: center;
                width: 100%;
                height: 100%;
            }

            touch := TouchArea {
                mouse-cursor: pointer;
                clicked => { root.piece-clicked(i); }
            }

            shadow := Rectangle {
                circle := Rectangle {
                    height: self.width;
                    border-radius: self.width/2;
                    background: #0002;
                    x: touch.pressed-x - self.width/2;
                    y: touch.pressed-y - self.width/2;
                }
            }
        }

        // –í—ã–∏–≥—Ä–∞–ª–∏?
        if (root.tiles-left == 0) : Text {
            width: root.pieces-size;
            height: root.pieces-size;
            x: 3 * (root.pieces-size + root.pieces-spacing)
                + (parent.width - (4*root.pieces-size + 3*root.pieces-spacing))/2;
            y: 3 * (root.pieces-size + root.pieces-spacing)
                + (parent.height - (4*root.pieces-size + 3*root.pieces-spacing))/2;

            color: root.current-theme.game-highlight-color;
            font-size: root.pieces-size / 2;
            vertical-alignment: center;
            horizontal-alignment: center;
            text: "üëç";
        }
    }

    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
    Rectangle {
        width: parent.width;
        height: root.current-theme.game-border;
        background: root.current-theme.game-text-color;
        y: parent.height - root.pieces-size / 2;
    }

    // –°—Ç–∞—Ç—É—Å
    HorizontalLayout {
        height: root.pieces-size / 2;
        y: parent.height - root.pieces-size / 2;
        width: parent.width;
        padding: self.height * 25%;

        Text {
            text: " –ù–æ–≤–∞—è ";
            font-size: parent.height * 40%;
            font-weight: 800;
            color: root.current-theme.game-highlight-color;
            vertical-alignment: center;
            TouchArea {
                mouse-cursor: pointer;
                clicked => { root.reset(); }
            }
        }

        Rectangle {} // —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ

        Text {
            text: "–í—ã–∏–≥—Ä–∞—Ç—å";
            font-size: parent.height * 40%;
            font-weight: 800;
            color: root.current-theme.game-highlight-color;
            vertical-alignment: center;
            TouchArea {
                mouse-cursor: pointer;
                clicked => { root.win(); }
            }
        }

        Rectangle {} // —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ
        Text {
            text: root.moves;
            font-size: parent.height * 40%;
            font-weight: 800;
            color: root.current-theme.game-highlight-color;
            vertical-alignment: center;
        }

        Text {
            text: " –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ ";
            font-size: parent.height * 40%;
            color: root.current-theme.game-text-color;
            vertical-alignment: center;
        }

        Text {
            text: root.tiles-left;
            font-size: parent.height * 40%;
            font-weight: 800;
            color: root.current-theme.game-highlight-color;
            vertical-alignment: center;
        }

        Text {
            text: " –û—Å—Ç–∞–ª–æ—Å—å";
            font-size: parent.height * 40%;
            color: root.current-theme.game-text-color;
            vertical-alignment: center;
        }
    }
}
