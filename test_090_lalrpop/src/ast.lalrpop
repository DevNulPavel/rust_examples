// Так можно испортировать просто какие-то модули
use std::str::FromStr;
// А так мы можем импортировать какие-то наши типы
use crate::ast::{Expr, Opcode};

// Стартуем нашу грамматику
grammar;

/// Описание нашего выражения, которое имеет тип Box<Expr> в самом Rust
pub(crate) Expr: Box<Expr> = {
    /// Здесь у нас аналогично калькулятору правило умножения имеет более высокий приоритет,
    /// так как оно является дочерним правилом.
    Expr ExprOp Factor => {
        // Мы можем заменить сразу три параметра, которые распарсились 
        // с помощью одного значения в угловых скобках `<>`
        Box::new(Expr::Op(<>))
    },
    /// Просто какое-то умножение
    Factor,
};

/// Операция сложения какая-то и вычитания
ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

/// Отдельно операция умножения для более высокого приоритета.
Factor: Box<Expr> = {
    /// Правило, где у нас есть другое выражение умножения сначала
    Factor FactorOp Term => {
        // Можно заменить сразу 3 выражения, которые распарсили
        // на значения, которые передаем в Op
        Box::new(Expr::Op(<>))
    },
    // Просто число или другое выражение в скобках
    Term,
};

/// Операции умножения и деления
FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

/// Какая-то операция с числом, которая обернута в Box из-за возможной рекурсивности
Term: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    "(" <Expr> ")"
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};