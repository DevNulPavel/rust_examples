<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="159125"><g><title>libsystem_c.dylib`__opendir2 (17 samples, 0.01%)</title><rect x="0.0088%" y="117" width="0.0107%" height="15" fill="rgb(227,0,7)" fg:x="14" fg:w="17"/><text x="0.2588%" y="127.50"></text></g><g><title>dir_split`walkdir::IntoIter::handle_entry (19 samples, 0.01%)</title><rect x="0.0082%" y="165" width="0.0119%" height="15" fill="rgb(217,0,24)" fg:x="13" fg:w="19"/><text x="0.2582%" y="175.50"></text></g><g><title>dir_split`walkdir::IntoIter::push (18 samples, 0.01%)</title><rect x="0.0088%" y="149" width="0.0113%" height="15" fill="rgb(221,193,54)" fg:x="14" fg:w="18"/><text x="0.2588%" y="159.50"></text></g><g><title>dir_split`std::sys::unix::fs::readdir (18 samples, 0.01%)</title><rect x="0.0088%" y="133" width="0.0113%" height="15" fill="rgb(248,212,6)" fg:x="14" fg:w="18"/><text x="0.2588%" y="143.50"></text></g><g><title>dir_split`&lt;walkdir::IntoIter as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.02%)</title><rect x="0.0019%" y="181" width="0.0220%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="35"/><text x="0.2519%" y="191.50"></text></g><g><title>dir_split`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (21 samples, 0.01%)</title><rect x="0.0239%" y="149" width="0.0132%" height="15" fill="rgb(232,128,0)" fg:x="38" fg:w="21"/><text x="0.2739%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (21 samples, 0.01%)</title><rect x="0.0239%" y="133" width="0.0132%" height="15" fill="rgb(207,160,47)" fg:x="38" fg:w="21"/><text x="0.2739%" y="143.50"></text></g><g><title>dir_split`&lt;brotli_decompressor::io_wrappers::IoReaderWrapper&lt;InputType&gt; as brotli_decompressor::io_wrappers::CustomRead&lt;std::io::error::Error&gt;&gt;::read (22 samples, 0.01%)</title><rect x="0.0239%" y="165" width="0.0138%" height="15" fill="rgb(228,23,34)" fg:x="38" fg:w="22"/><text x="0.2739%" y="175.50"></text></g><g><title>dir_split`&lt;alloc_stdlib::std_alloc::StandardAlloc as alloc_no_stdlib::stack_allocator::Allocator&lt;T&gt;&gt;::alloc_cell (22 samples, 0.01%)</title><rect x="0.0408%" y="133" width="0.0138%" height="15" fill="rgb(218,30,26)" fg:x="65" fg:w="22"/><text x="0.2908%" y="143.50"></text></g><g><title>dir_split`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (21 samples, 0.01%)</title><rect x="0.0415%" y="117" width="0.0132%" height="15" fill="rgb(220,122,19)" fg:x="66" fg:w="21"/><text x="0.2915%" y="127.50"></text></g><g><title>dir_split`brotli::enc::backward_references::hash_to_binary_tree::InitializeH10 (10,100 samples, 6.35%)</title><rect x="0.0654%" y="133" width="6.3472%" height="15" fill="rgb(250,228,42)" fg:x="104" fg:w="10100"/><text x="0.3154%" y="143.50">dir_spli..</text></g><g><title>dir_split`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10,040 samples, 6.31%)</title><rect x="0.1031%" y="117" width="6.3095%" height="15" fill="rgb(240,193,28)" fg:x="164" fg:w="10040"/><text x="0.3531%" y="127.50">dir_spli..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (10,040 samples, 6.31%)</title><rect x="0.1031%" y="101" width="6.3095%" height="15" fill="rgb(216,20,37)" fg:x="164" fg:w="10040"/><text x="0.3531%" y="111.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10,040 samples, 6.31%)</title><rect x="0.1031%" y="85" width="6.3095%" height="15" fill="rgb(206,188,39)" fg:x="164" fg:w="10040"/><text x="0.3531%" y="95.50">libsyste..</text></g><g><title>libsystem_platform.dylib`__bzero (10,040 samples, 6.31%)</title><rect x="0.1031%" y="69" width="6.3095%" height="15" fill="rgb(217,207,13)" fg:x="164" fg:w="10040"/><text x="0.3531%" y="79.50">libsyste..</text></g><g><title>dir_split`&lt;alloc_stdlib::std_alloc::StandardAlloc as alloc_no_stdlib::stack_allocator::Allocator&lt;T&gt;&gt;::alloc_cell (182 samples, 0.11%)</title><rect x="7.3295%" y="117" width="0.1144%" height="15" fill="rgb(231,73,38)" fg:x="11663" fg:w="182"/><text x="7.5795%" y="127.50"></text></g><g><title>dir_split`DYLD-STUB$$memset_pattern16 (42 samples, 0.03%)</title><rect x="7.4438%" y="117" width="0.0264%" height="15" fill="rgb(225,20,46)" fg:x="11845" fg:w="42"/><text x="7.6938%" y="127.50"></text></g><g><title>libsystem_platform.dylib`__bzero (171 samples, 0.11%)</title><rect x="7.4715%" y="69" width="0.1075%" height="15" fill="rgb(210,31,41)" fg:x="11889" fg:w="171"/><text x="7.7215%" y="79.50"></text></g><g><title>dir_split`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (176 samples, 0.11%)</title><rect x="7.4702%" y="117" width="0.1106%" height="15" fill="rgb(221,200,47)" fg:x="11887" fg:w="176"/><text x="7.7202%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (176 samples, 0.11%)</title><rect x="7.4702%" y="101" width="0.1106%" height="15" fill="rgb(226,26,5)" fg:x="11887" fg:w="176"/><text x="7.7202%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (176 samples, 0.11%)</title><rect x="7.4702%" y="85" width="0.1106%" height="15" fill="rgb(249,33,26)" fg:x="11887" fg:w="176"/><text x="7.7202%" y="95.50"></text></g><g><title>dir_split`brotli::enc::backward_references::hash_to_binary_tree::StoreAndFindMatchesH10 (256 samples, 0.16%)</title><rect x="7.5808%" y="117" width="0.1609%" height="15" fill="rgb(235,183,28)" fg:x="12063" fg:w="256"/><text x="7.8308%" y="127.50"></text></g><g><title>dir_split`brotli::enc::static_dict::FindMatchLengthWithLimit (142 samples, 0.09%)</title><rect x="7.6525%" y="101" width="0.0892%" height="15" fill="rgb(221,5,38)" fg:x="12177" fg:w="142"/><text x="7.9025%" y="111.50"></text></g><g><title>dir_split`brotli::enc::backward_references::hq::BrotliZopfliCreateCommands (21 samples, 0.01%)</title><rect x="7.7417%" y="117" width="0.0132%" height="15" fill="rgb(247,18,42)" fg:x="12319" fg:w="21"/><text x="7.9917%" y="127.50"></text></g><g><title>dir_split`brotli::enc::backward_references::hq::EvaluateNode (181 samples, 0.11%)</title><rect x="7.7574%" y="117" width="0.1137%" height="15" fill="rgb(241,131,45)" fg:x="12344" fg:w="181"/><text x="8.0074%" y="127.50"></text></g><g><title>dir_split`brotli::enc::backward_references::hq::ComputeDistanceCache (56 samples, 0.04%)</title><rect x="7.8360%" y="101" width="0.0352%" height="15" fill="rgb(249,31,29)" fg:x="12469" fg:w="56"/><text x="8.0860%" y="111.50"></text></g><g><title>dir_split`brotli::enc::backward_references::hash_to_binary_tree::StoreAndFindMatchesH10 (13,099 samples, 8.23%)</title><rect x="11.5720%" y="101" width="8.2319%" height="15" fill="rgb(225,111,53)" fg:x="18414" fg:w="13099"/><text x="11.8220%" y="111.50">dir_split`b..</text></g><g><title>dir_split`brotli::enc::static_dict::FindMatchLengthWithLimit (4,626 samples, 2.91%)</title><rect x="16.8968%" y="85" width="2.9071%" height="15" fill="rgb(238,160,17)" fg:x="26887" fg:w="4626"/><text x="17.1468%" y="95.50">di..</text></g><g><title>dir_split`brotli::enc::static_dict::BrotliFindAllStaticDictionaryMatches (1,421 samples, 0.89%)</title><rect x="19.8039%" y="101" width="0.8930%" height="15" fill="rgb(214,148,48)" fg:x="31513" fg:w="1421"/><text x="20.0539%" y="111.50"></text></g><g><title>dir_split`brotli::enc::static_dict::IsMatch (191 samples, 0.12%)</title><rect x="20.5769%" y="85" width="0.1200%" height="15" fill="rgb(232,36,49)" fg:x="32743" fg:w="191"/><text x="20.8269%" y="95.50"></text></g><g><title>dir_split`brotli::enc::static_dict::FindMatchLengthWithLimit (648 samples, 0.41%)</title><rect x="20.6969%" y="101" width="0.4072%" height="15" fill="rgb(209,103,24)" fg:x="32934" fg:w="648"/><text x="20.9469%" y="111.50"></text></g><g><title>dir_split`brotli::enc::backward_references::hq::FindAllMatchesH10 (21,068 samples, 13.24%)</title><rect x="7.8712%" y="117" width="13.2399%" height="15" fill="rgb(229,88,8)" fg:x="12525" fg:w="21068"/><text x="8.1212%" y="127.50">dir_split`brotli::en..</text></g><g><title>dir_split`brotli::enc::backward_references::hq::StartPosQueuePush (52 samples, 0.03%)</title><rect x="21.1167%" y="117" width="0.0327%" height="15" fill="rgb(213,181,19)" fg:x="33602" fg:w="52"/><text x="21.3667%" y="127.50"></text></g><g><title>dir_split`brotli::enc::backward_references::hq::ComputeDistanceCache (93 samples, 0.06%)</title><rect x="71.8768%" y="101" width="0.0584%" height="15" fill="rgb(254,191,54)" fg:x="114374" fg:w="93"/><text x="72.1268%" y="111.50"></text></g><g><title>dir_split`brotli::enc::backward_references::hq::EvaluateNode (1,434 samples, 0.90%)</title><rect x="71.9353%" y="101" width="0.9012%" height="15" fill="rgb(241,83,37)" fg:x="114467" fg:w="1434"/><text x="72.1853%" y="111.50"></text></g><g><title>dir_split`brotli::enc::backward_references::hq::ComputeDistanceCache (690 samples, 0.43%)</title><rect x="72.4028%" y="85" width="0.4336%" height="15" fill="rgb(233,36,39)" fg:x="115211" fg:w="690"/><text x="72.6528%" y="95.50"></text></g><g><title>dir_split`brotli::enc::backward_references::hq::StartPosQueuePush (1,723 samples, 1.08%)</title><rect x="72.8364%" y="101" width="1.0828%" height="15" fill="rgb(226,3,54)" fg:x="115901" fg:w="1723"/><text x="73.0864%" y="111.50"></text></g><g><title>dir_split`brotli::enc::backward_references::hq::UpdateNodes (90,877 samples, 57.11%)</title><rect x="21.1494%" y="117" width="57.1104%" height="15" fill="rgb(245,192,40)" fg:x="33654" fg:w="90877"/><text x="21.3994%" y="127.50">dir_split`brotli::enc::backward_references::hq::UpdateNodes</text></g><g><title>dir_split`brotli::enc::static_dict::FindMatchLengthWithLimit (6,907 samples, 4.34%)</title><rect x="73.9192%" y="101" width="4.3406%" height="15" fill="rgb(238,167,29)" fg:x="117624" fg:w="6907"/><text x="74.1692%" y="111.50">dir_s..</text></g><g><title>dir_split`DYLD-STUB$$log2f (40 samples, 0.03%)</title><rect x="78.5364%" y="101" width="0.0251%" height="15" fill="rgb(232,182,51)" fg:x="124971" fg:w="40"/><text x="78.7864%" y="111.50"></text></g><g><title>dir_split`brotli::enc::utf8_util::BrotliIsMostlyUTF8 (260 samples, 0.16%)</title><rect x="79.0090%" y="85" width="0.1634%" height="15" fill="rgb(231,60,39)" fg:x="125723" fg:w="260"/><text x="79.2590%" y="95.50"></text></g><g><title>dir_split`brotli::enc::literal_cost::BrotliEstimateBitCostsForLiterals (1,155 samples, 0.73%)</title><rect x="78.5615%" y="101" width="0.7258%" height="15" fill="rgb(208,69,12)" fg:x="125011" fg:w="1155"/><text x="78.8115%" y="111.50"></text></g><g><title>libsystem_m.dylib`log2f (183 samples, 0.12%)</title><rect x="79.1723%" y="85" width="0.1150%" height="15" fill="rgb(235,93,37)" fg:x="125983" fg:w="183"/><text x="79.4223%" y="95.50"></text></g><g><title>dir_split`brotli::enc::backward_references::hq::ZopfliCostModelSetFromLiteralCosts (1,674 samples, 1.05%)</title><rect x="78.2599%" y="117" width="1.0520%" height="15" fill="rgb(213,116,39)" fg:x="124531" fg:w="1674"/><text x="78.5099%" y="127.50"></text></g><g><title>libsystem_m.dylib`log2f (39 samples, 0.02%)</title><rect x="79.2874%" y="101" width="0.0245%" height="15" fill="rgb(222,207,29)" fg:x="126166" fg:w="39"/><text x="79.5374%" y="111.50"></text></g><g><title>dir_split`brotli::enc::command::InitCommand (67 samples, 0.04%)</title><rect x="79.3119%" y="117" width="0.0421%" height="15" fill="rgb(206,96,30)" fg:x="126205" fg:w="67"/><text x="79.5619%" y="127.50"></text></g><g><title>dir_split`brotli::enc::command::PrefixEncodeCopyDistance (991 samples, 0.62%)</title><rect x="79.3540%" y="117" width="0.6228%" height="15" fill="rgb(218,138,4)" fg:x="126272" fg:w="991"/><text x="79.6040%" y="127.50"></text></g><g><title>dir_split`brotli::enc::static_dict::BrotliFindAllStaticDictionaryMatches (37 samples, 0.02%)</title><rect x="79.9767%" y="117" width="0.0233%" height="15" fill="rgb(250,191,14)" fg:x="127263" fg:w="37"/><text x="80.2267%" y="127.50"></text></g><g><title>dir_split`brotli::enc::static_dict::FindMatchLengthWithLimit (199 samples, 0.13%)</title><rect x="80.0000%" y="117" width="0.1251%" height="15" fill="rgb(239,60,40)" fg:x="127300" fg:w="199"/><text x="80.2500%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (281 samples, 0.18%)</title><rect x="80.1263%" y="101" width="0.1766%" height="15" fill="rgb(206,27,48)" fg:x="127501" fg:w="281"/><text x="80.3763%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (284 samples, 0.18%)</title><rect x="80.1251%" y="117" width="0.1785%" height="15" fill="rgb(225,35,8)" fg:x="127499" fg:w="284"/><text x="80.3751%" y="127.50"></text></g><g><title>dir_split`brotli::enc::backward_references::hq::BrotliCreateHqZopfliBackwardReferences (117,823 samples, 74.04%)</title><rect x="6.4132%" y="133" width="74.0443%" height="15" fill="rgb(250,213,24)" fg:x="10205" fg:w="117823"/><text x="6.6632%" y="143.50">dir_split`brotli::enc::backward_references::hq::BrotliCreateHqZopfliBackwardReferences</text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (242 samples, 0.15%)</title><rect x="80.3054%" y="117" width="0.1521%" height="15" fill="rgb(247,123,22)" fg:x="127786" fg:w="242"/><text x="80.5554%" y="127.50"></text></g><g><title>dir_split`brotli::enc::backward_references::hq::FindAllMatchesH10 (62 samples, 0.04%)</title><rect x="80.4619%" y="133" width="0.0390%" height="15" fill="rgb(231,138,38)" fg:x="128035" fg:w="62"/><text x="80.7119%" y="143.50"></text></g><g><title>dir_split`brotli::enc::backward_references::hq::UpdateNodes (209 samples, 0.13%)</title><rect x="80.5009%" y="133" width="0.1313%" height="15" fill="rgb(231,145,46)" fg:x="128097" fg:w="209"/><text x="80.7509%" y="143.50"></text></g><g><title>dir_split`brotli::enc::brotli_bit_stream::BrotliWriteBits (61 samples, 0.04%)</title><rect x="80.6756%" y="117" width="0.0383%" height="15" fill="rgb(251,118,11)" fg:x="128375" fg:w="61"/><text x="80.9256%" y="127.50"></text></g><g><title>dir_split`brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (37 samples, 0.02%)</title><rect x="80.7202%" y="101" width="0.0233%" height="15" fill="rgb(217,147,25)" fg:x="128446" fg:w="37"/><text x="80.9702%" y="111.50"></text></g><g><title>dir_split`brotli::enc::entropy_encode::BrotliWriteHuffmanTree (17 samples, 0.01%)</title><rect x="80.7328%" y="85" width="0.0107%" height="15" fill="rgb(247,81,37)" fg:x="128466" fg:w="17"/><text x="80.9828%" y="95.50"></text></g><g><title>dir_split`brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (52 samples, 0.03%)</title><rect x="80.7434%" y="101" width="0.0327%" height="15" fill="rgb(209,12,38)" fg:x="128483" fg:w="52"/><text x="80.9934%" y="111.50"></text></g><g><title>dir_split`brotli::enc::entropy_encode::BrotliCreateHuffmanTree (71 samples, 0.04%)</title><rect x="80.7761%" y="101" width="0.0446%" height="15" fill="rgb(227,1,9)" fg:x="128535" fg:w="71"/><text x="81.0261%" y="111.50"></text></g><g><title>dir_split`brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (169 samples, 0.11%)</title><rect x="80.7152%" y="117" width="0.1062%" height="15" fill="rgb(248,47,43)" fg:x="128438" fg:w="169"/><text x="80.9652%" y="127.50"></text></g><g><title>dir_split`brotli::enc::brotli_bit_stream::StoreCommandExtra (17 samples, 0.01%)</title><rect x="80.8295%" y="117" width="0.0107%" height="15" fill="rgb(221,10,30)" fg:x="128620" fg:w="17"/><text x="81.0795%" y="127.50"></text></g><g><title>dir_split`brotli::enc::brotli_bit_stream::StoreSymbolWithContext (42 samples, 0.03%)</title><rect x="80.8427%" y="117" width="0.0264%" height="15" fill="rgb(210,229,1)" fg:x="128641" fg:w="42"/><text x="81.0927%" y="127.50"></text></g><g><title>dir_split`brotli::enc::brotli_bit_stream::BrotliStoreMetaBlock (382 samples, 0.24%)</title><rect x="80.6322%" y="133" width="0.2401%" height="15" fill="rgb(222,148,37)" fg:x="128306" fg:w="382"/><text x="80.8822%" y="143.50"></text></g><g><title>dir_split`brotli::enc::brotli_bit_stream::BrotliWriteBits (20 samples, 0.01%)</title><rect x="80.8723%" y="133" width="0.0126%" height="15" fill="rgb(234,67,33)" fg:x="128688" fg:w="20"/><text x="81.1223%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (32 samples, 0.02%)</title><rect x="80.8999%" y="117" width="0.0201%" height="15" fill="rgb(247,98,35)" fg:x="128732" fg:w="32"/><text x="81.1499%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (32 samples, 0.02%)</title><rect x="80.8999%" y="101" width="0.0201%" height="15" fill="rgb(247,138,52)" fg:x="128732" fg:w="32"/><text x="81.1499%" y="111.50"></text></g><g><title>dir_split`brotli::enc::brotli_bit_stream::MetaBlockSplit&lt;Alloc&gt;::destroy (38 samples, 0.02%)</title><rect x="80.8974%" y="133" width="0.0239%" height="15" fill="rgb(213,79,30)" fg:x="128728" fg:w="38"/><text x="81.1474%" y="143.50"></text></g><g><title>dir_split`brotli::enc::encode::ChooseContextMode (598 samples, 0.38%)</title><rect x="80.9288%" y="133" width="0.3758%" height="15" fill="rgb(246,177,23)" fg:x="128778" fg:w="598"/><text x="81.1788%" y="143.50"></text></g><g><title>dir_split`brotli::enc::utf8_util::BrotliIsMostlyUTF8 (598 samples, 0.38%)</title><rect x="80.9288%" y="117" width="0.3758%" height="15" fill="rgb(230,62,27)" fg:x="128778" fg:w="598"/><text x="81.1788%" y="127.50"></text></g><g><title>dir_split`brotli::enc::block_splitter::BitCost (23 samples, 0.01%)</title><rect x="81.3279%" y="101" width="0.0145%" height="15" fill="rgb(216,154,8)" fg:x="129413" fg:w="23"/><text x="81.5779%" y="111.50"></text></g><g><title>dir_split`brotli::enc::bit_cost::ShannonEntropy (32 samples, 0.02%)</title><rect x="88.1628%" y="69" width="0.0201%" height="15" fill="rgb(244,35,45)" fg:x="140289" fg:w="32"/><text x="88.4128%" y="79.50"></text></g><g><title>dir_split`brotli::enc::bit_cost::BrotliPopulationCost (812 samples, 0.51%)</title><rect x="87.6732%" y="85" width="0.5103%" height="15" fill="rgb(251,115,12)" fg:x="139510" fg:w="812"/><text x="87.9232%" y="95.50"></text></g><g><title>dir_split`brotli::enc::block_splitter::RemapBlockIds (112 samples, 0.07%)</title><rect x="88.1835%" y="85" width="0.0704%" height="15" fill="rgb(240,54,50)" fg:x="140322" fg:w="112"/><text x="88.4335%" y="95.50"></text></g><g><title>dir_split`brotli::enc::bit_cost::ShannonEntropy (35 samples, 0.02%)</title><rect x="89.2713%" y="37" width="0.0220%" height="15" fill="rgb(233,84,52)" fg:x="142053" fg:w="35"/><text x="89.5213%" y="47.50"></text></g><g><title>dir_split`brotli::enc::bit_cost::BrotliPopulationCost (1,492 samples, 0.94%)</title><rect x="88.3563%" y="53" width="0.9376%" height="15" fill="rgb(207,117,47)" fg:x="140597" fg:w="1492"/><text x="88.6063%" y="63.50"></text></g><g><title>dir_split`brotli::enc::cluster::BrotliCompareAndPushToQueue (1,619 samples, 1.02%)</title><rect x="88.2809%" y="69" width="1.0174%" height="15" fill="rgb(249,43,39)" fg:x="140477" fg:w="1619"/><text x="88.5309%" y="79.50"></text></g><g><title>dir_split`brotli::enc::cluster::BrotliHistogramCombine (1,700 samples, 1.07%)</title><rect x="88.2558%" y="85" width="1.0683%" height="15" fill="rgb(209,38,44)" fg:x="140437" fg:w="1700"/><text x="88.5058%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (41 samples, 0.03%)</title><rect x="89.2984%" y="69" width="0.0258%" height="15" fill="rgb(236,212,23)" fg:x="142096" fg:w="41"/><text x="89.5484%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (42 samples, 0.03%)</title><rect x="89.3273%" y="85" width="0.0264%" height="15" fill="rgb(242,79,21)" fg:x="142142" fg:w="42"/><text x="89.5773%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (42 samples, 0.03%)</title><rect x="89.3273%" y="69" width="0.0264%" height="15" fill="rgb(211,96,35)" fg:x="142142" fg:w="42"/><text x="89.5773%" y="79.50"></text></g><g><title>dir_split`brotli::enc::block_splitter::SplitByteVector (12,759 samples, 8.02%)</title><rect x="81.3524%" y="101" width="8.0182%" height="15" fill="rgb(253,215,40)" fg:x="129452" fg:w="12759"/><text x="81.6024%" y="111.50">dir_split`b..</text></g><g><title>dir_split`brotli::enc::vectorization::sum8i (240 samples, 0.15%)</title><rect x="89.3800%" y="101" width="0.1508%" height="15" fill="rgb(211,81,21)" fg:x="142226" fg:w="240"/><text x="89.6300%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (50 samples, 0.03%)</title><rect x="89.5359%" y="101" width="0.0314%" height="15" fill="rgb(208,190,38)" fg:x="142474" fg:w="50"/><text x="89.7859%" y="111.50"></text></g><g><title>dir_split`brotli::enc::block_splitter::BrotliSplitBlock (13,168 samples, 8.28%)</title><rect x="81.3172%" y="117" width="8.2753%" height="15" fill="rgb(235,213,38)" fg:x="129396" fg:w="13168"/><text x="81.5672%" y="127.50">dir_split`br..</text></g><g><title>libsystem_platform.dylib`_platform_memset (40 samples, 0.03%)</title><rect x="89.5673%" y="101" width="0.0251%" height="15" fill="rgb(237,122,38)" fg:x="142524" fg:w="40"/><text x="89.8173%" y="111.50"></text></g><g><title>dir_split`brotli::enc::bit_cost::ShannonEntropy (141 samples, 0.09%)</title><rect x="91.9686%" y="85" width="0.0886%" height="15" fill="rgb(244,218,35)" fg:x="146345" fg:w="141"/><text x="92.2186%" y="95.50"></text></g><g><title>dir_split`brotli::enc::bit_cost::BrotliPopulationCost (3,643 samples, 2.29%)</title><rect x="89.7734%" y="101" width="2.2894%" height="15" fill="rgb(240,68,47)" fg:x="142852" fg:w="3643"/><text x="90.0234%" y="111.50">d..</text></g><g><title>dir_split`brotli::enc::cluster::BrotliCompareAndPushToQueue (40 samples, 0.03%)</title><rect x="92.0679%" y="101" width="0.0251%" height="15" fill="rgb(210,16,53)" fg:x="146503" fg:w="40"/><text x="92.3179%" y="111.50"></text></g><g><title>dir_split`brotli::enc::bit_cost::ShannonEntropy (234 samples, 0.15%)</title><rect x="96.8496%" y="53" width="0.1471%" height="15" fill="rgb(235,124,12)" fg:x="154112" fg:w="234"/><text x="97.0996%" y="63.50"></text></g><g><title>dir_split`brotli::enc::bit_cost::BrotliPopulationCost (6,107 samples, 3.84%)</title><rect x="93.1632%" y="69" width="3.8379%" height="15" fill="rgb(224,169,11)" fg:x="148246" fg:w="6107"/><text x="93.4132%" y="79.50">dir_..</text></g><g><title>dir_split`brotli::enc::cluster::BrotliCompareAndPushToQueue (6,918 samples, 4.35%)</title><rect x="92.6624%" y="85" width="4.3475%" height="15" fill="rgb(250,166,2)" fg:x="147449" fg:w="6918"/><text x="92.9124%" y="95.50">dir_s..</text></g><g><title>dir_split`brotli::enc::cluster::BrotliHistogramCombine (8,051 samples, 5.06%)</title><rect x="92.0930%" y="101" width="5.0595%" height="15" fill="rgb(242,216,29)" fg:x="146543" fg:w="8051"/><text x="92.3430%" y="111.50">dir_sp..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (227 samples, 0.14%)</title><rect x="97.0099%" y="85" width="0.1427%" height="15" fill="rgb(230,116,27)" fg:x="154367" fg:w="227"/><text x="97.2599%" y="95.50"></text></g><g><title>dir_split`brotli::enc::cluster::BrotliClusterHistograms (12,044 samples, 7.57%)</title><rect x="89.5931%" y="117" width="7.5689%" height="15" fill="rgb(228,99,48)" fg:x="142565" fg:w="12044"/><text x="89.8431%" y="127.50">dir_split`..</text></g><g><title>dir_split`brotli::enc::histogram::BrotliBuildHistogramsWithContext (61 samples, 0.04%)</title><rect x="97.1658%" y="117" width="0.0383%" height="15" fill="rgb(253,11,6)" fg:x="154615" fg:w="61"/><text x="97.4158%" y="127.50"></text></g><g><title>dir_split`brotli::enc::metablock::ComputeDistanceCost (143 samples, 0.09%)</title><rect x="97.2041%" y="117" width="0.0899%" height="15" fill="rgb(247,143,39)" fg:x="154676" fg:w="143"/><text x="97.4541%" y="127.50"></text></g><g><title>dir_split`brotli::enc::bit_cost::BrotliPopulationCost (41 samples, 0.03%)</title><rect x="97.2682%" y="101" width="0.0258%" height="15" fill="rgb(236,97,10)" fg:x="154778" fg:w="41"/><text x="97.5182%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (26 samples, 0.02%)</title><rect x="97.3009%" y="117" width="0.0163%" height="15" fill="rgb(233,208,19)" fg:x="154830" fg:w="26"/><text x="97.5509%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (26 samples, 0.02%)</title><rect x="97.3009%" y="101" width="0.0163%" height="15" fill="rgb(216,164,2)" fg:x="154830" fg:w="26"/><text x="97.5509%" y="111.50"></text></g><g><title>dir_split`brotli::enc::metablock::BrotliBuildMetaBlock (25,678 samples, 16.14%)</title><rect x="81.3053%" y="133" width="16.1370%" height="15" fill="rgb(220,129,5)" fg:x="129377" fg:w="25678"/><text x="81.5553%" y="143.50">dir_split`brotli::enc::me..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (191 samples, 0.12%)</title><rect x="97.3222%" y="117" width="0.1200%" height="15" fill="rgb(242,17,10)" fg:x="154864" fg:w="191"/><text x="97.5722%" y="127.50"></text></g><g><title>dir_split`brotli::enc::metablock::BrotliOptimizeHistograms (34 samples, 0.02%)</title><rect x="97.4423%" y="133" width="0.0214%" height="15" fill="rgb(242,107,0)" fg:x="155055" fg:w="34"/><text x="97.6923%" y="143.50"></text></g><g><title>dir_split`brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (34 samples, 0.02%)</title><rect x="97.4423%" y="117" width="0.0214%" height="15" fill="rgb(251,28,31)" fg:x="155055" fg:w="34"/><text x="97.6923%" y="127.50"></text></g><g><title>dir_split`brotli::enc::encode::EncodeData (155,033 samples, 97.43%)</title><rect x="0.0402%" y="149" width="97.4284%" height="15" fill="rgb(233,223,10)" fg:x="64" fg:w="155033"/><text x="0.2902%" y="159.50">dir_split`brotli::enc::encode::EncodeData</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1,024 samples, 0.64%)</title><rect x="97.4687%" y="117" width="0.6435%" height="15" fill="rgb(215,21,27)" fg:x="155097" fg:w="1024"/><text x="97.7187%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,024 samples, 0.64%)</title><rect x="97.4687%" y="101" width="0.6435%" height="15" fill="rgb(232,23,21)" fg:x="155097" fg:w="1024"/><text x="97.7187%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1,023 samples, 0.64%)</title><rect x="97.4693%" y="85" width="0.6429%" height="15" fill="rgb(244,5,23)" fg:x="155098" fg:w="1023"/><text x="97.7193%" y="95.50"></text></g><g><title>dir_split`brotli::enc::encode::RingBufferInitBuffer (1,025 samples, 0.64%)</title><rect x="97.4687%" y="149" width="0.6441%" height="15" fill="rgb(226,81,46)" fg:x="155097" fg:w="1025"/><text x="97.7187%" y="159.50"></text></g><g><title>dir_split`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,025 samples, 0.64%)</title><rect x="97.4687%" y="133" width="0.6441%" height="15" fill="rgb(247,70,30)" fg:x="155097" fg:w="1025"/><text x="97.7187%" y="143.50"></text></g><g><title>dir_split`brotli::enc::encode::BrotliEncoderCompressStream (156,064 samples, 98.08%)</title><rect x="0.0377%" y="165" width="98.0764%" height="15" fill="rgb(212,68,19)" fg:x="60" fg:w="156064"/><text x="0.2877%" y="175.50">dir_split`brotli::enc::encode::BrotliEncoderCompressStream</text></g><g><title>libsystem_kernel.dylib`madvise (1,025 samples, 0.64%)</title><rect x="98.1147%" y="133" width="0.6441%" height="15" fill="rgb(240,187,13)" fg:x="156125" fg:w="1025"/><text x="98.3647%" y="143.50"></text></g><g><title>dir_split`brotli::enc::backward_references::UnionHasher&lt;Alloc&gt;::free (1,041 samples, 0.65%)</title><rect x="98.1141%" y="149" width="0.6542%" height="15" fill="rgb(223,113,26)" fg:x="156124" fg:w="1041"/><text x="98.3641%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (127 samples, 0.08%)</title><rect x="98.7683%" y="149" width="0.0798%" height="15" fill="rgb(206,192,2)" fg:x="157165" fg:w="127"/><text x="99.0183%" y="159.50"></text></g><g><title>dir_split`brotli::enc::encode::BrotliEncoderDestroyInstance (1,234 samples, 0.78%)</title><rect x="98.1141%" y="165" width="0.7755%" height="15" fill="rgb(241,108,4)" fg:x="156124" fg:w="1234"/><text x="98.3641%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (65 samples, 0.04%)</title><rect x="98.8487%" y="149" width="0.0408%" height="15" fill="rgb(247,173,49)" fg:x="157293" fg:w="65"/><text x="99.0987%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (64 samples, 0.04%)</title><rect x="98.8493%" y="133" width="0.0402%" height="15" fill="rgb(224,114,35)" fg:x="157294" fg:w="64"/><text x="99.0993%" y="143.50"></text></g><g><title>dir_split`brotli::enc::BrotliCompress (157,325 samples, 98.87%)</title><rect x="0.0239%" y="181" width="98.8688%" height="15" fill="rgb(245,159,27)" fg:x="38" fg:w="157325"/><text x="0.2739%" y="191.50">dir_split`brotli::enc::BrotliCompress</text></g><g><title>dir_split`sled::tree::Tree::insert_inner (18 samples, 0.01%)</title><rect x="98.8946%" y="165" width="0.0113%" height="15" fill="rgb(245,172,44)" fg:x="157366" fg:w="18"/><text x="99.1446%" y="175.50"></text></g><g><title>dir_split`dir_split::cache::save_in_cache (20 samples, 0.01%)</title><rect x="98.8940%" y="181" width="0.0126%" height="15" fill="rgb(236,23,11)" fg:x="157365" fg:w="20"/><text x="99.1440%" y="191.50"></text></g><g><title>dir_split`md5::consume (117 samples, 0.07%)</title><rect x="98.9172%" y="165" width="0.0735%" height="15" fill="rgb(205,117,38)" fg:x="157402" fg:w="117"/><text x="99.1672%" y="175.50"></text></g><g><title>dir_split`md5::transform (162 samples, 0.10%)</title><rect x="98.9907%" y="165" width="0.1018%" height="15" fill="rgb(237,72,25)" fg:x="157519" fg:w="162"/><text x="99.2407%" y="175.50"></text></g><g><title>dir_split`sled::tree::Tree::split_node (16 samples, 0.01%)</title><rect x="99.1001%" y="133" width="0.0101%" height="15" fill="rgb(244,70,9)" fg:x="157693" fg:w="16"/><text x="99.3501%" y="143.50"></text></g><g><title>dir_split`sled::tree::Tree::view_for_key (21 samples, 0.01%)</title><rect x="99.0976%" y="149" width="0.0132%" height="15" fill="rgb(217,125,39)" fg:x="157689" fg:w="21"/><text x="99.3476%" y="159.50"></text></g><g><title>dir_split`sled::tree::Tree::get_inner (30 samples, 0.02%)</title><rect x="99.0925%" y="165" width="0.0189%" height="15" fill="rgb(235,36,10)" fg:x="157681" fg:w="30"/><text x="99.3425%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (161 samples, 0.10%)</title><rect x="99.1158%" y="165" width="0.1012%" height="15" fill="rgb(251,123,47)" fg:x="157718" fg:w="161"/><text x="99.3658%" y="175.50"></text></g><g><title>dir_split`dir_split::cache::search_in_cache (498 samples, 0.31%)</title><rect x="98.9065%" y="181" width="0.3130%" height="15" fill="rgb(221,13,13)" fg:x="157385" fg:w="498"/><text x="99.1565%" y="191.50"></text></g><g><title>dir_split`std::fs::DirBuilder::create_dir_all (17 samples, 0.01%)</title><rect x="99.2233%" y="165" width="0.0107%" height="15" fill="rgb(238,131,9)" fg:x="157889" fg:w="17"/><text x="99.4733%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mkdir (74 samples, 0.05%)</title><rect x="99.2427%" y="165" width="0.0465%" height="15" fill="rgb(211,50,8)" fg:x="157920" fg:w="74"/><text x="99.4927%" y="175.50"></text></g><g><title>dir_split`std::fs::DirBuilder::create_dir_all (106 samples, 0.07%)</title><rect x="99.2233%" y="181" width="0.0666%" height="15" fill="rgb(245,182,24)" fg:x="157889" fg:w="106"/><text x="99.4733%" y="191.50"></text></g><g><title>dir_split`std::fs::OpenOptions::_open (83 samples, 0.05%)</title><rect x="99.2899%" y="181" width="0.0522%" height="15" fill="rgb(242,14,37)" fg:x="157995" fg:w="83"/><text x="99.5399%" y="191.50"></text></g><g><title>dir_split`std::sys::unix::fs::File::open_c (83 samples, 0.05%)</title><rect x="99.2899%" y="165" width="0.0522%" height="15" fill="rgb(246,228,12)" fg:x="157995" fg:w="83"/><text x="99.5399%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__open (83 samples, 0.05%)</title><rect x="99.2899%" y="149" width="0.0522%" height="15" fill="rgb(213,55,15)" fg:x="157995" fg:w="83"/><text x="99.5399%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`stat (46 samples, 0.03%)</title><rect x="99.3471%" y="165" width="0.0289%" height="15" fill="rgb(209,9,3)" fg:x="158086" fg:w="46"/><text x="99.5971%" y="175.50"></text></g><g><title>dir_split`std::path::Path::is_file (48 samples, 0.03%)</title><rect x="99.3464%" y="181" width="0.0302%" height="15" fill="rgb(230,59,30)" fg:x="158085" fg:w="48"/><text x="99.5964%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__rename (461 samples, 0.29%)</title><rect x="99.3772%" y="165" width="0.2897%" height="15" fill="rgb(209,121,21)" fg:x="158134" fg:w="461"/><text x="99.6272%" y="175.50"></text></g><g><title>dir_split`std::sys::unix::fs::rename (462 samples, 0.29%)</title><rect x="99.3772%" y="181" width="0.2903%" height="15" fill="rgb(220,109,13)" fg:x="158134" fg:w="462"/><text x="99.6272%" y="191.50"></text></g><g><title>dir_split`std::sys::unix::fs::unlink (55 samples, 0.03%)</title><rect x="99.6958%" y="101" width="0.0346%" height="15" fill="rgb(232,18,1)" fg:x="158641" fg:w="55"/><text x="99.9458%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__unlink (55 samples, 0.03%)</title><rect x="99.6958%" y="85" width="0.0346%" height="15" fill="rgb(215,41,42)" fg:x="158641" fg:w="55"/><text x="99.9458%" y="95.50"></text></g><g><title>dir_split`std::sys::unix::fs::unlink (18 samples, 0.01%)</title><rect x="99.7442%" y="85" width="0.0113%" height="15" fill="rgb(224,123,36)" fg:x="158718" fg:w="18"/><text x="99.9942%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__unlink (18 samples, 0.01%)</title><rect x="99.7442%" y="69" width="0.0113%" height="15" fill="rgb(240,125,3)" fg:x="158718" fg:w="18"/><text x="99.9942%" y="79.50"></text></g><g><title>dir_split`std::sys::unix::fs::unlink (111 samples, 0.07%)</title><rect x="99.7750%" y="69" width="0.0698%" height="15" fill="rgb(205,98,50)" fg:x="158767" fg:w="111"/><text x="100.0250%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__unlink (111 samples, 0.07%)</title><rect x="99.7750%" y="53" width="0.0698%" height="15" fill="rgb(205,185,37)" fg:x="158767" fg:w="111"/><text x="100.0250%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__unlink (33 samples, 0.02%)</title><rect x="99.8492%" y="37" width="0.0207%" height="15" fill="rgb(238,207,15)" fg:x="158885" fg:w="33"/><text x="100.0992%" y="47.50"></text></g><g><title>dir_split`std::sys::unix::fs::unlink (34 samples, 0.02%)</title><rect x="99.8492%" y="53" width="0.0214%" height="15" fill="rgb(213,199,42)" fg:x="158885" fg:w="34"/><text x="100.0992%" y="63.50"></text></g><g><title>dir_split`std::sys_common::fs::remove_dir_all_recursive (43 samples, 0.03%)</title><rect x="99.8448%" y="69" width="0.0270%" height="15" fill="rgb(235,201,11)" fg:x="158878" fg:w="43"/><text x="100.0948%" y="79.50"></text></g><g><title>dir_split`std::sys_common::fs::remove_dir_all_recursive (228 samples, 0.14%)</title><rect x="99.7304%" y="101" width="0.1433%" height="15" fill="rgb(207,46,11)" fg:x="158696" fg:w="228"/><text x="99.9804%" y="111.50"></text></g><g><title>dir_split`std::sys_common::fs::remove_dir_all_recursive (188 samples, 0.12%)</title><rect x="99.7555%" y="85" width="0.1181%" height="15" fill="rgb(241,35,35)" fg:x="158736" fg:w="188"/><text x="100.0055%" y="95.50"></text></g><g><title>dir_split`std::sys_common::fs::remove_dir_all_recursive (329 samples, 0.21%)</title><rect x="99.6676%" y="181" width="0.2068%" height="15" fill="rgb(243,32,47)" fg:x="158596" fg:w="329"/><text x="99.9176%" y="191.50"></text></g><g><title>dir_split`std::sys_common::fs::remove_dir_all_recursive (329 samples, 0.21%)</title><rect x="99.6676%" y="165" width="0.2068%" height="15" fill="rgb(247,202,23)" fg:x="158596" fg:w="329"/><text x="99.9176%" y="175.50"></text></g><g><title>dir_split`std::sys_common::fs::remove_dir_all_recursive (329 samples, 0.21%)</title><rect x="99.6676%" y="149" width="0.2068%" height="15" fill="rgb(219,102,11)" fg:x="158596" fg:w="329"/><text x="99.9176%" y="159.50"></text></g><g><title>dir_split`std::sys_common::fs::remove_dir_all_recursive (328 samples, 0.21%)</title><rect x="99.6682%" y="133" width="0.2061%" height="15" fill="rgb(243,110,44)" fg:x="158597" fg:w="328"/><text x="99.9182%" y="143.50"></text></g><g><title>dir_split`std::sys_common::fs::remove_dir_all_recursive (299 samples, 0.19%)</title><rect x="99.6864%" y="117" width="0.1879%" height="15" fill="rgb(222,74,54)" fg:x="158626" fg:w="299"/><text x="99.9364%" y="127.50"></text></g><g><title>dir_split`dir_split::main (158,928 samples, 99.88%)</title><rect x="0.0013%" y="197" width="99.8762%" height="15" fill="rgb(216,99,12)" fg:x="2" fg:w="158928"/><text x="0.2513%" y="207.50">dir_split`dir_split::main</text></g><g><title>dir_split`main (158,948 samples, 99.89%)</title><rect x="0.0000%" y="261" width="99.8888%" height="15" fill="rgb(226,22,26)" fg:x="0" fg:w="158948"/><text x="0.2500%" y="271.50">dir_split`main</text></g><g><title>dir_split`std::rt::lang_start_internal (158,948 samples, 99.89%)</title><rect x="0.0000%" y="245" width="99.8888%" height="15" fill="rgb(217,163,10)" fg:x="0" fg:w="158948"/><text x="0.2500%" y="255.50">dir_split`std::rt::lang_start_internal</text></g><g><title>dir_split`std::rt::lang_start::_{{closure}} (158,948 samples, 99.89%)</title><rect x="0.0000%" y="229" width="99.8888%" height="15" fill="rgb(213,25,53)" fg:x="0" fg:w="158948"/><text x="0.2500%" y="239.50">dir_split`std::rt::lang_start::_{{closure}}</text></g><g><title>dir_split`std::sys_common::backtrace::__rust_begin_short_backtrace (158,948 samples, 99.89%)</title><rect x="0.0000%" y="213" width="99.8888%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="158948"/><text x="0.2500%" y="223.50">dir_split`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_kernel.dylib`close (16 samples, 0.01%)</title><rect x="99.8787%" y="197" width="0.0101%" height="15" fill="rgb(220,39,43)" fg:x="158932" fg:w="16"/><text x="100.1287%" y="207.50"></text></g><g><title>libdyld.dylib`start (158,951 samples, 99.89%)</title><rect x="0.0000%" y="277" width="99.8907%" height="15" fill="rgb(229,68,48)" fg:x="0" fg:w="158951"/><text x="0.2500%" y="287.50">libdyld.dylib`start</text></g><g><title>dir_split`sled::flusher::run (35 samples, 0.02%)</title><rect x="99.8919%" y="197" width="0.0220%" height="15" fill="rgb(252,8,32)" fg:x="158953" fg:w="35"/><text x="100.1419%" y="207.50"></text></g><g><title>dir_split`std::fs::File::sync_all (17 samples, 0.01%)</title><rect x="99.9032%" y="181" width="0.0107%" height="15" fill="rgb(223,20,43)" fg:x="158971" fg:w="17"/><text x="100.1532%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__fcntl (17 samples, 0.01%)</title><rect x="99.9032%" y="165" width="0.0107%" height="15" fill="rgb(229,81,49)" fg:x="158971" fg:w="17"/><text x="100.1532%" y="175.50"></text></g><g><title>dir_split`sled::pagecache::parallel_io_unix::pwrite_all (34 samples, 0.02%)</title><rect x="99.9246%" y="149" width="0.0214%" height="15" fill="rgb(236,28,36)" fg:x="159005" fg:w="34"/><text x="100.1746%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`pwrite (34 samples, 0.02%)</title><rect x="99.9246%" y="133" width="0.0214%" height="15" fill="rgb(249,185,26)" fg:x="159005" fg:w="34"/><text x="100.1746%" y="143.50"></text></g><g><title>dir_split`sled::pagecache::iobuf::IoBufs::write_to_log (70 samples, 0.04%)</title><rect x="99.9139%" y="165" width="0.0440%" height="15" fill="rgb(249,174,33)" fg:x="158988" fg:w="70"/><text x="100.1639%" y="175.50"></text></g><g><title>dir_split`std::fs::File::sync_all (17 samples, 0.01%)</title><rect x="99.9472%" y="149" width="0.0107%" height="15" fill="rgb(233,201,37)" fg:x="159041" fg:w="17"/><text x="100.1972%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__fcntl (17 samples, 0.01%)</title><rect x="99.9472%" y="133" width="0.0107%" height="15" fill="rgb(221,78,26)" fg:x="159041" fg:w="17"/><text x="100.1972%" y="143.50"></text></g><g><title>dir_split`core::ops::function::FnOnce::call_once{{vtable.shim}} (72 samples, 0.05%)</title><rect x="99.9139%" y="181" width="0.0452%" height="15" fill="rgb(250,127,30)" fg:x="158988" fg:w="72"/><text x="100.1639%" y="191.50"></text></g><g><title>dir_split`parking_lot::raw_mutex::RawMutex::unlock_slow (16 samples, 0.01%)</title><rect x="99.9617%" y="165" width="0.0101%" height="15" fill="rgb(230,49,44)" fg:x="159064" fg:w="16"/><text x="100.2117%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (32 samples, 0.02%)</title><rect x="99.9749%" y="165" width="0.0201%" height="15" fill="rgb(229,67,23)" fg:x="159085" fg:w="32"/><text x="100.2249%" y="175.50"></text></g><g><title>dir_split`parking_lot::condvar::Condvar::wait_until_internal (61 samples, 0.04%)</title><rect x="99.9592%" y="181" width="0.0383%" height="15" fill="rgb(249,83,47)" fg:x="159060" fg:w="61"/><text x="100.2092%" y="191.50"></text></g><g><title>all (159,125 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(215,43,3)" fg:x="0" fg:w="159125"/><text x="0.2500%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (173 samples, 0.11%)</title><rect x="99.8913%" y="277" width="0.1087%" height="15" fill="rgb(238,154,13)" fg:x="158952" fg:w="173"/><text x="100.1413%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (173 samples, 0.11%)</title><rect x="99.8913%" y="261" width="0.1087%" height="15" fill="rgb(219,56,2)" fg:x="158952" fg:w="173"/><text x="100.1413%" y="271.50"></text></g><g><title>dir_split`std::sys::unix::thread::Thread::new::thread_start (173 samples, 0.11%)</title><rect x="99.8913%" y="245" width="0.1087%" height="15" fill="rgb(233,0,4)" fg:x="158952" fg:w="173"/><text x="100.1413%" y="255.50"></text></g><g><title>dir_split`core::ops::function::FnOnce::call_once{{vtable.shim}} (173 samples, 0.11%)</title><rect x="99.8913%" y="229" width="0.1087%" height="15" fill="rgb(235,30,7)" fg:x="158952" fg:w="173"/><text x="100.1413%" y="239.50"></text></g><g><title>dir_split`std::sys_common::backtrace::__rust_begin_short_backtrace (173 samples, 0.11%)</title><rect x="99.8913%" y="213" width="0.1087%" height="15" fill="rgb(250,79,13)" fg:x="158952" fg:w="173"/><text x="100.1413%" y="223.50"></text></g><g><title>dir_split`sled::threadpool::perform_work (137 samples, 0.09%)</title><rect x="99.9139%" y="197" width="0.0861%" height="15" fill="rgb(211,146,34)" fg:x="158988" fg:w="137"/><text x="100.1639%" y="207.50"></text></g></svg></svg>