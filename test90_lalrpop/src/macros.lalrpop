use std::str::FromStr;

grammar;

/// Мы можем сделать некоторые typedef для списка выражений, разделенных запятыми.
pub(crate) Exprs = Comma<Expr>;

/// Список представляет из себя вектор итемов
Comma<T>: Vec<T> = {
    /// Выражение в скобках представляет из себя новое анонимное правило
    /// которое мы ввели прямо здесь на месте.
    // Парсится в этом правиле только что-то, что обернуто в крулые скобки.
    // Символ `*` значит произвольное количество выражений, которые конвертируются в Vec,
    // элемент мы так же можем пометить мутабельным, чтобы как-то модифицировать его если надо.
    // Символ `?` значит 1 или 0 элементов, это преобразуется в Option.
    <mut v:(<T> ",")*> <e:T?> => {
        // Смотрим на наличие последнего элемента
        match e {
            // Элемента нету - возвращаем просто список
            None => v,
            // Если последний элемент есть, то в список бы добавляем еще последний элемент
            Some(e) => {
                v.push(e);
                v
            }
        }
    }
};

Expr: i32 = {
    /// Операция сложения выражения и операции умножения, 
    /// приоритет умножения достигается за счет того, что выражение 
    // умножения имеет вложенность, поэтому вычисляется раньше.
    <l:Expr> "+" <r:Factor> => l + r,
    /// Операция вычитания
    <l:Expr> "-" <r:Factor> => l - r,
    // Операция умножения сразу же
    Factor,
};

/// Операция умножения или деления
Factor: i32 = {
    /// Операция умножения другой операции умножения на число или выражение в скобках
    <l:Factor> "*" <r:Term> => l * r,
    /// Операция деления другой операции умножения на число или выражение в скобках
    <l:Factor> "/" <r:Term> => l / r,
    /// Либо здесь у нас просто сразу какое-то числовое выражение
    Term,
};

/// Либо число, либо какое-то другое выражение в скобках
Term: i32 = {
    Num,
    "(" <Expr> ")",
};

/// Число из регулярного выражения парсим
Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap(),
};