use std::str::FromStr;

grammar;

pub Expr: i32 = {
    /// Операция сложения выражения и операции умножения, 
    /// приоритет умножения достигается за счет того, что выражение 
    // умножения имеет вложенность, поэтому вычисляется раньше.
    <l:Expr> "+" <r:Factor> => l + r,
    /// Операция вычитания
    <l:Expr> "-" <r:Factor> => l - r,
    // Операция умножения сразу же
    Factor,
};

/// Операция умножения или деления
Factor: i32 = {
    /// Операция умножения другой операции умножения на число или выражение в скобках
    <l:Factor> "*" <r:Term> => l * r,
    /// Операция деления другой операции умножения на число или выражение в скобках
    <l:Factor> "/" <r:Term> => l / r,
    /// Либо здесь у нас просто сразу какое-то числовое выражение
    Term,
};

/// Либо число, либо какое-то другое выражение в скобках
Term: i32 = {
    Num,
    "(" <Expr> ")",
};

/// Число из регулярного выражения парсим
Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap(),
};