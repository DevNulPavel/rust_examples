#![allow(unused_imports, dead_code, unused_variables)]

use std::slice;
use std::str;

fn test_strings(){
    {
        // &str - —ç—Ç–æ —Ç–æ–ª—Å—Ç—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –∏–∑ —Å–µ–±—è —Å—ã—Ä–æ–π —É–∫–∞–∑–∞—Ç–µ–ª—å + –¥–ª–∏–Ω—É
        let story: &str = "Once upon a time...";

        // –ú–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω—É–ª–µ–º
        let ptr: *const u8 = story.as_ptr();
        // –ú–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏–Ω—É
        let len = story.len();

        // –í –±–ª–æ–∫–µ unsafe –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –Ω–∞—à—É —Å—Ç—Ä–æ–∫—É –∏–∑ —Å—ã—Ä–æ–≥–æ —É–∫–∞–∑–∞—Ç–µ–ª—è –∏ –¥–ª–∏–Ω—ã
        let s = unsafe {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å
            assert_eq!(ptr.is_null(), false);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
            assert_eq!(19, len);

            // –°–Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞–µ–º —Å–ª–∞–π—Å &[u8]
            let slice = slice::from_raw_parts(ptr, len);

            // –ó–∞—Ç–µ–º —Å–ª–∞–π—Å –º—ã –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å–Ω–æ–≤–∞ –≤ —Å—Ç—Ä–æ–∫—É
            str::from_utf8(slice)
        };

        assert_eq!(s, Ok(story));
    }

    {
        // –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏–Ω—É
        let len = "foo".len();
        assert_eq!(3, len);

        let len = "∆íoo".len(); // fancy f! - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª f
        assert_eq!(4, len);
    }

    {
        // –ú–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –±–∞–π—Ç—ã
        let bytes = "bors".as_bytes();
        assert_eq!(b"bors", bytes);
    }

    {
        // –ú–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ get –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, —Ç–∞–∫ –∏ –ø–æ–¥—Å–ª–∞–π—Å
        let v = String::from("üóª‚ààüåè");

        assert_eq!(Some("üóª"), v.get(0..4));

        // –ò–Ω–¥–µ–∫—Å—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü UTF-8
        assert!(v.get(1..=40).is_none()); // 1..=40 - —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –º—ã —É–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤–∫–ª—é—á–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        assert!(v.get(..8).is_none());

        // out of bounds
        assert!(v.get(..42).is_none());
    }
}

fn main() {
    test_strings();
}

#[cfg(test)]
mod test {
    #[test]
    fn name() {
        crate::test_strings();
    }
}