// Описание грамматики:
// https://pest.rs/book/examples/json.html#writing-the-grammar

// Сначала определяем тихую грамматику для пробела и переноса строки, которая не будет попадать в 
// парсинг нашей строки.
// Если определены правила WHITESPACE или COMMENT, тогда они будут подставляться везде между продолжениями.
// Но кроме атомарнырных правил.
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

//////////////////////////////////////////////////////////////////////////////////////////

text = { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

// Правило делаем атомарным, то есть там не может встречаться пробел.
number = @{ 
    // В самом начале может быть, а может и не быть минус
    "-"? ~
    // Затем у нас может быть либо ноль, либо число, ноторое не начинается с нуля
    ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* ) ~
    // Затем может быть либо десятичная запятая с цифрами после, либо нет
    ("." ~ ASCII_DIGIT+)? ~
    // Затем может появиться экспоненциальная запись.
    // Сначала регистронезависимый символ "e", после этого может быть либо минус, либо нет.
    // Затем мы можем писать цифры минимум 1 раз.
    (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

null = @{ "null" }

boolean = @{ "true" | "false" }

//////////////////////////////////////////////////////////////////////////////////////////

key = { "\"" ~ (!"\"" ~ ANY)+ ~ "\"" }

// Делаем правило silent так как оно является частью парсинга key_value???
value = _{ object | array | text | number | boolean | null }

key_value = { key ~ ":" ~ value }

array = {
    // Либо у нас просто пустой массив
    ("[" ~ "]") |
    // Либо у нас есть массив со значениями через запятую
    ("[" ~ (value ~ ("," ~ value)*)? ~ "]")
}

object = {
    // Совсем пустой словарь отдельно
    ("{" ~ "}") | 
    // Словарь со значениями, разделенными запятыми
    ("{" ~ key_value ~ ("," ~ key_value ~)* ~ "}")
}